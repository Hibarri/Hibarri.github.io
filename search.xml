<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>今天也要笑一笑 ت</title>
      <link href="/2022/10/05/%E4%BB%8A%E5%A4%A9%E4%B9%9F%E8%A6%81%E7%AC%91%E4%B8%80%E7%AC%91/"/>
      <url>/2022/10/05/%E4%BB%8A%E5%A4%A9%E4%B9%9F%E8%A6%81%E7%AC%91%E4%B8%80%E7%AC%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每天更一个冷笑话</p><p>让<span style ='color:pink'>yh</span>笑一笑</p></blockquote><p>好吧  可能做不到每天  可能也不好笑</p><p>但我保证 一定很冷！！</p><span id="more"></span><hr><p><strong>2022.10.15</strong></p><p>我一睁开眼睛就亮</p><p>一闭上眼睛就暗</p><p>会不会我也是一个冰箱呢</p><p><strong>2022.10.14</strong></p><p>“哪种动物最安静”</p><p>“是猩猩</p><p>因为它喜欢敲咪咪”</p><p><strong>2022.10.12</strong></p><p>“我有一份让人惊讶的工作”</p><p>“什么工作”</p><p>“挖藕”</p><p><strong>2022.10.11</strong></p><p>今天不想写冷笑话了</p><p>想写几句好可爱的歌词！！</p><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p><span style ='color:#F0BBFF'>可能是月亮不会眨眼<br />星星不会说话<br />让你觉得孤单啦<br />可能是太阳熬夜太晚<br />云朵们都太懒<br />忘了帮你编童话<br />可能是你所谓的转角<br />是其他人的直线<br />所以没法给你个回答</span></p>            <i class="fa fa-quote-right"></i>          </blockquote><p><strong>2022.10.10</strong></p><p>一天呢</p><p>开心和高兴约好12点去吃午饭</p><p>然后开心就开始打游戏</p><p>让高兴到点叫他</p><p>结果两个人都忘记了</p><p>高兴觉得肚子很饿</p><p>一看时间都一点了</p><p>于是他就喊</p><p>“开心一点啦</p><p>开心一点啦！”</p><p><strong>2022.10.9</strong></p><p>张飞和刘备骑马骑到悬崖边上</p><p>刘备喊：“你快勒马！”</p><p>张飞答：“我很快乐！”</p><p><strong>2022.10.8</strong></p><p>有一只大象</p><p>在吃冰激凌</p><p>但是吃着吃就吐了</p><p>因为</p><p>象腻了！</p><p><strong>2022.10.7</strong></p><p>“Do u have a girlfriend?”</p><p>“Yeah, she is from another nation.”</p><p>“Which nation?”</p><p>“Imagination.”</p><p><strong>2022.10.6</strong></p><p>有一天呢</p><p>我和yh吵架</p><p>yh非常生气</p><p>气的他夺门而出</p><p>我一看 这哪行啊 我得追回来</p><p>于是我追着他跑了好几条街</p><p>终于把家门给拿回来了</p><p><strong>2022.10.5</strong></p><p>从前有一只小绵羊</p><p>某一天心血来潮去剪了羊毛</p><p>就再也睡不着了</p><p>因为它 失绵啦</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2022/10/02/python/"/>
      <url>/2022/10/02/python/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Learn Python From Computer Vison   <code>T^T</code></p></blockquote><span id="more"></span><h2 id="OpenCV之cv2函数"><a href="#OpenCV之cv2函数" class="headerlink" title="OpenCV之cv2函数"></a>OpenCV之cv2函数</h2><h3 id="img-cv2-imread-filepath-flags"><a href="#img-cv2-imread-filepath-flags" class="headerlink" title="img=cv2.imread(filepath,flags)"></a>img=cv2.imread(filepath,flags)</h3><p>读图片img 将图片存储为数组，数组内存放像素值</p><ul><li><p>filepath：读入图片的完整图片</p></li><li><p>flags：如何读入图片</p></li></ul><p><strong>img.shape[:3]取彩色图片的长、宽、通道数</strong></p><p>在矩阵中img.shape[0]表示行数，img.shape[1]表示列数</p><h3 id="cv2-imshow-quot-window-name-quot-img"><a href="#cv2-imshow-quot-window-name-quot-img" class="headerlink" title="cv2.imshow(&quot;window_name&quot;,img)"></a><code>cv2.imshow(&quot;window_name&quot;,img)</code></h3><p>创建一个窗口显示图片</p><ul><li><p>“window_name”：显示图像的窗口的名字</p></li><li><p>img：要显示的图像</p></li></ul><h3 id="cv2-waitKey-0"><a href="#cv2-waitKey-0" class="headerlink" title="cv2.waitKey(0)"></a><code>cv2.waitKey(0)</code></h3><p>等待键盘输入，单位毫秒</p><p>若在等待时间内按下任意键则返回按键的ASCII码，程序继续运行。若没有按下任何键，超时后返回-1。参数为0表示无限等待。不调用waitKey的话，窗口会一闪而逝，看不到显示的图片。</p><h3 id="cv2-destroyAllWindows"><a href="#cv2-destroyAllWindows" class="headerlink" title="cv2.destroyAllWindows()"></a><code>cv2.destroyAllWindows()</code></h3><p>销毁所有窗口</p><h3 id="cv2-destroyWindows-wname"><a href="#cv2-destroyWindows-wname" class="headerlink" title="cv2.destroyWindows(wname)"></a><code>cv2.destroyWindows(wname)</code></h3><p>销毁指定窗口</p><h3 id="cv2-imwrite-file-img-num"><a href="#cv2-imwrite-file-img-num" class="headerlink" title="cv2.imwrite(file,img,num)"></a><code>cv2.imwrite(file,img,num)</code></h3><p>保存一个图像</p><ul><li><p>file：要保存的文件名</p></li><li><p>img：要保存的图像</p></li><li><p>num：可选参数，它针对特定的格式：对于JPEG，其表示的是图像的质量，用0 - 100的整数表示，默认95;对于png ,第三个参数表示的是压缩级别。默认为3。</p></li><li><p>cv2.IMWRITE_JPEG_QUALITY类型为 long ,必须转换成 int</p></li><li><p>cv2.IMWRITE_PNG_COMPRESSION, 从0到9 压缩级别越高图像越小。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eg.</span></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;1.png&#x27;</span>,img,[<span class="built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="number">95</span>])</span><br><span class="line"></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;1.png&#x27;</span>,img，[<span class="built_in">int</span>(cv2.IMWRITE_PNG_COMPRESSION), <span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>相同目录下 包括拓展名</p><h3 id="cv2-filter2D图像卷积"><a href="#cv2-filter2D图像卷积" class="headerlink" title="cv2.filter2D图像卷积"></a><code>cv2.filter2D</code>图像卷积</h3><p>在<a href="https://so.csdn.net/so/search?q=OpenCV&amp;spm=1001.2101.3001.7020">OpenCV</a>中，允许用户自定义卷积核实现卷积操作，使用自定义卷积核实现卷积操作的函数是cv2.filter2D（），其语法格式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv2.filter2D（src,ddepth,kernel,anchor,delta,borderType）</span><br></pre></td></tr></table></figure><p>cv.filter2D()的常用形式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv2.filter2D（src,ddepth,kernel）</span><br></pre></td></tr></table></figure><ul><li><p>dst 为返回值，表示进行方框滤波后得到的处理结果。</p></li><li><p>src 是需要处理的图像，即原始图像。它能够有任意数量的通道，并能对各个通道独立处理。图像深度应该是CV_8U、CV_16U、CV_16S、CV_32F或者CV_64F中的一 种。</p></li><li><p>ddepth是处理结果图像的图像深度，一般使用-1表示与原始图像使用相同的图像深度。</p></li><li><p>kernel是卷积核，是一个单通道的数组。如果想在处理彩色图像时，让每个通道使用不同的核，则必须将彩色图像分解后使用不同的核完成操作。</p></li></ul><h3 id="cv2-KeyPoint"><a href="#cv2-KeyPoint" class="headerlink" title="cv2.KeyPoint"></a><code>cv2.KeyPoint</code></h3><p>关键点检测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 属性</span></span><br><span class="line">.pt <span class="comment"># 点的坐标</span></span><br><span class="line">.size <span class="comment"># 点邻域大小</span></span><br><span class="line">.angle <span class="comment"># 特征点方向</span></span><br><span class="line">.response <span class="comment"># 特征点响应程度指数 响应越强，关键点越好</span></span><br><span class="line">.octave <span class="comment"># 特征点所在的金字塔组 从哪一层得到的数据</span></span><br><span class="line">.class_id <span class="comment"># 类型</span></span><br></pre></td></tr></table></figure><h3 id="cv2-DMatch"><a href="#cv2-DMatch" class="headerlink" title="cv2.DMatch"></a><code>cv2.DMatch</code></h3><p>匹配关键点描述符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 属性</span></span><br><span class="line">.distance <span class="comment"># 描述符之间的距离，越小越好</span></span><br><span class="line">.trainIdx <span class="comment"># 目标图像中描述符的索引</span></span><br><span class="line">.queryIdx <span class="comment"># 查询图像中描述符的索引</span></span><br><span class="line">.imgIdx <span class="comment"># 目标图像的索引</span></span><br></pre></td></tr></table></figure><h3 id="cv2-warpAffine-仿射变换"><a href="#cv2-warpAffine-仿射变换" class="headerlink" title="cv2.warpAffine()仿射变换"></a><code>cv2.warpAffine()</code>仿射变换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">warpAffine</span>(<span class="params">src, M, dsize, dst=<span class="literal">None</span>, flags=<span class="literal">None</span>, borderMode=<span class="literal">None</span>, borderValue=<span class="literal">None</span></span>)</span><br></pre></td></tr></table></figure><ul><li>src：输入图像</li><li>M：运算矩阵，2行3列的，数据类型要求是float32位及以上</li><li>dsize：运算后矩阵的大小，也就是输出图片的尺寸</li><li>dst：输出图像</li><li>flags：插值方法的组合，与resize函数中的插值一样，可以查看cv2.resize</li><li>borderMode：像素外推方法，详情参考官网</li><li>borderValue：在恒定边框的情况下使用的borderValue值；默认情况下，它是 0</li></ul><h3 id="np-argmin-和np-argmax"><a href="#np-argmin-和np-argmax" class="headerlink" title="np.argmin()和np.argmax()"></a><code>np.argmin()</code>和<code>np.argmax()</code></h3><p>按照axis的要求返回最小的数/最大的数的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numpy.argmin(a, axis=<span class="literal">None</span>, out=<span class="literal">None</span>)</span><br><span class="line">numpy.argmax(a, axis=<span class="literal">None</span>, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/juzicode/p/15520820.html">OpenCV-通道分离与合并</a></p><p><a href="https://blog.csdn.net/weixin_43843069/article/details/122208702">OpenCV-特征点检测</a></p></blockquote><h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><p><code>import numpy as np</code></p><h3 id="将图片转换为数组"><a href="#将图片转换为数组" class="headerlink" title="将图片转换为数组"></a>将图片转换为数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img=np.array(img)</span><br></pre></td></tr></table></figure><h3 id="向line数组添加元素x"><a href="#向line数组添加元素x" class="headerlink" title="向line数组添加元素x"></a>向line数组添加元素x</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line.append(x)</span><br></pre></td></tr></table></figure><h3 id="数组求和，返回一个值"><a href="#数组求和，返回一个值" class="headerlink" title="数组求和，返回一个值"></a>数组求和，返回一个值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(a)</span><br></pre></td></tr></table></figure><h3 id="两数组按位置乘积"><a href="#两数组按位置乘积" class="headerlink" title="两数组按位置乘积"></a>两数组按位置乘积</h3><p>若两数组shape不同的话，会将小规格的矩阵延展成与另一矩阵一样大小，再求两者内积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mutiply(a,b)</span><br></pre></td></tr></table></figure><h3 id="返回数组维度"><a href="#返回数组维度" class="headerlink" title="返回数组维度"></a>返回数组维度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img.ndim <span class="comment"># 等于秩</span></span><br><span class="line"></span><br><span class="line">img.shape <span class="comment"># 返回一个元组 长度为维数(即ndim 如二维数组表示行列数)</span></span><br></pre></td></tr></table></figure><h3 id="创建全0数组"><a href="#创建全0数组" class="headerlink" title="创建全0数组"></a>创建全0数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(x)  <span class="comment"># x为0的个数</span></span><br><span class="line">np.zeros((<span class="number">2</span>,<span class="number">5</span>))  <span class="comment">#2行5列 默认float</span></span><br><span class="line">np.zeros((<span class="number">2</span>,<span class="number">5</span>), dtype=np.<span class="built_in">int</span>)  <span class="comment">#int型</span></span><br><span class="line"></span><br><span class="line">np.zeros_like(a, dtype=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#Return an array of zeros with the same shape and type as a given array.</span></span><br></pre></td></tr></table></figure><h3 id="比较两个数组是否相等"><a href="#比较两个数组是否相等" class="headerlink" title="比较两个数组是否相等"></a>比较两个数组是否相等</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.allclose(a, b, rtol=<span class="number">1e-05</span>, atol=<span class="number">1e-08</span>, equal_nan=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 判断公式：</span></span><br><span class="line"><span class="comment"># absolute(a - b) &lt;= (atol + rtol * absolute(b))</span></span><br></pre></td></tr></table></figure><p>如果两个数组在公差范围内按元素方式相等，则返回True。</p><p>公差值是正的，通常很小。将相对差(rtol * abs(b))和绝对差atol相加在一起，以与a和b之间的绝对差进行比较。</p><p>如果任一数组包含一个或多个NaN，则返回False。如果两个数组中的inf位于相同位置且具有相同符号，则将它们视为相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.isclose(a, b, rtol=<span class="number">1.e-5</span>, atol=<span class="number">1.e-8</span>, equal_nan=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>参数与numpy.allclose相同，判断公式也一样，区别在于numpy.isclose输出a，b两个数组每个位置判断的bool值，而numpy.allclose输出的是a，b两个数组整体的判断结果。</p><h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.logical_and(a, b)</span><br><span class="line"><span class="comment"># 对a,b数组每个元素进行逻辑与运算，返回bool</span></span><br></pre></td></tr></table></figure><h3 id="创建全1数组"><a href="#创建全1数组" class="headerlink" title="创建全1数组"></a>创建全1数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.ones(shape, dtype=<span class="built_in">float</span>, order=<span class="string">&#x27;C&#x27;</span>) </span><br><span class="line"><span class="comment"># shape:返回的数组的维度或形状</span></span><br><span class="line"><span class="comment"># dtype:可选参数,返回的数组内数据的数据类型,默认是float</span></span><br><span class="line"><span class="comment"># order:可选参数,与C语言类似,C代表行优先,F代表列优先</span></span><br></pre></td></tr></table></figure><h3 id="数组拼接"><a href="#数组拼接" class="headerlink" title="数组拼接"></a>数组拼接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numpy.stack((array1,array2)) <span class="comment">#将两数组拼接为三维数组</span></span><br><span class="line"></span><br><span class="line">numpy.row_stack() <span class="comment">#形成的是二维数组，行拼接在一起</span></span><br><span class="line"></span><br><span class="line">numpy.column_stack() <span class="comment">#二维数组，列拼接在一起</span></span><br></pre></td></tr></table></figure><h3 id="矩阵翻转"><a href="#矩阵翻转" class="headerlink" title="矩阵翻转"></a>矩阵翻转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.flip(a, axis=<span class="number">0</span>)  <span class="comment"># axis=0：上下翻转</span></span><br><span class="line">np.flip(a, axis=<span class="number">1</span>)  <span class="comment"># axis=1：左右翻转</span></span><br></pre></td></tr></table></figure><h3 id="扩展数组形状"><a href="#扩展数组形状" class="headerlink" title="扩展数组形状"></a>扩展数组形状</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numpy.expand_dims(arr, axis)</span><br><span class="line"><span class="comment"># 通过在指定位置插入新的轴来扩展数组形状</span></span><br></pre></td></tr></table></figure><h3 id="数组flatten"><a href="#数组flatten" class="headerlink" title="数组flatten"></a>数组flatten</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array.flatten()</span><br><span class="line"><span class="comment"># 把数组a降到一维，默认按行的方向降</span></span><br></pre></td></tr></table></figure><h3 id="生成对角矩阵"><a href="#生成对角矩阵" class="headerlink" title="生成对角矩阵"></a>生成对角矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.eye(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 生成3×3对角矩阵 除对角线外全0</span></span><br></pre></td></tr></table></figure><h3 id="计算均值及标准差"><a href="#计算均值及标准差" class="headerlink" title="计算均值及标准差"></a>计算均值及标准差</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算均值</span></span><br><span class="line">np.mean(array)</span><br><span class="line"><span class="comment">#计算标准差</span></span><br><span class="line">np.std(array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axis=0计算每一列均值 返回行向量</span></span><br><span class="line"><span class="comment"># axis=1计算每一行均值 返回行向量</span></span><br></pre></td></tr></table></figure><h3 id="向量点积及矩阵乘法"><a href="#向量点积及矩阵乘法" class="headerlink" title="向量点积及矩阵乘法"></a>向量点积及矩阵乘法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dot(a, b)</span><br></pre></td></tr></table></figure><h3 id="文件保存与读写"><a href="#文件保存与读写" class="headerlink" title="文件保存与读写"></a>文件保存与读写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">np.save(file, arr, allow_pickle=<span class="literal">True</span>, fix_imports=<span class="literal">True</span>) <span class="comment"># 以“.npy”格式将数组保存到二进制文件中</span></span><br><span class="line">np.load(file, mmap_mode=<span class="literal">None</span>, allow_pickle=<span class="literal">False</span>, fix_imports=<span class="literal">True</span>, encoding=‘ASCII’) <span class="comment"># Load arrays or pickled objects from .npy, .npz or pickled files.</span></span><br><span class="line">np.savez(file, *args, **kwds) <span class="comment"># 将多个数组保存到一个文件中的话</span></span><br><span class="line"><span class="comment"># savez函数的第一个参数是文件名，其后的参数都是需要保存的数组</span></span><br><span class="line"><span class="comment"># savez函数输出的是一个压缩文件(扩展名为npz)，其中每个文件都是一个save函数保存的npy文件，文件名对应于数组名。</span></span><br><span class="line"><span class="comment"># load函数自动识别npz文件，并且返回一个类似于字典的对象，可以通过数组名作为关键字获取数组的内容。</span></span><br></pre></td></tr></table></figure><h2 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">unittest.main()  <span class="comment"># 用来测试 类中以 test 开头的测试用例</span></span><br></pre></td></tr></table></figure><p>python函数中可以通过return语句返回多个值</p><h3 id="assert-断言"><a href="#assert-断言" class="headerlink" title="assert 断言"></a><code>assert</code> 断言</h3><p>Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。</p><p>断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法格式如下</span></span><br><span class="line"><span class="keyword">assert</span> expression</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> expression:</span><br><span class="line">    <span class="keyword">raise</span> AssertionError</span><br></pre></td></tr></table></figure><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a><code>enumerate()</code></h3><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通for循环</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">seq = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> seq:</span><br><span class="line">    <span class="built_in">print</span>(i, seq[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用enumerate</span></span><br><span class="line">seq = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(seq):</span><br><span class="line">    <span class="built_in">print</span>(i, element)</span><br></pre></td></tr></table></figure><h3 id="数组切片"><a href="#数组切片" class="headerlink" title="数组切片"></a>数组切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt;a = np.arange(<span class="number">9</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(a)</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(a[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(a[:])</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">img_1=img[a : b , c : d]  <span class="comment"># 左闭右开</span></span><br><span class="line"></span><br><span class="line">img_2=img[: , : , <span class="number">0</span>]      <span class="comment"># 只有冒号表示全取，0为step</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 负切片</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line"><span class="comment"># 从末尾开始的索引 3 到末尾开始的索引 1，对数组进行切片：</span></span><br><span class="line"><span class="built_in">print</span>(arr[-<span class="number">3</span>:-<span class="number">1</span>])</span><br><span class="line">&gt;&gt;&gt;[<span class="number">5</span> <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>使用 [:] 表示从开始到结束的切片,所有的索引值都是从0开始的，切片操作都是左闭右开的区间，比如[0:2]意思是0,1</p><hr><p><strong>kernel</strong> 核</p><p><strong>dimension</strong> 维</p><p><strong>odd</strong> 奇数的</p><p><strong>pixels</strong> 像素</p><p><strong>axis</strong> 轴    复数:axes</p><p><strong>indices</strong> index的复数</p><p><strong>enumerate</strong> 枚举</p><p><strong>coordinate</strong> 坐标</p><p><strong>gradient</strong> 斜率</p><p><strong>visualization</strong> 可视化</p><p><strong>overlay</strong> 覆盖</p><p><strong>orientation</strong> 方向</p><p><strong>intensity</strong> 强度</p><p><strong>radians</strong> 弧度</p><p><strong>translation</strong> 平移</p><p><strong>scale</strong> 缩放</p><p><strong>map</strong> 映射</p><p><strong>affine</strong> 仿射</p><p><strong>warp</strong> 变形 弯曲</p><p><strong>variance</strong> 方差</p><p><strong>custom descriptors</strong> 自定义描述符</p><p><strong>deprecated</strong> 弃用</p><p><strong>tuple</strong> 元组</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++</title>
      <link href="/2022/09/17/c%E8%89%B9/"/>
      <url>/2022/09/17/c%E8%89%B9/</url>
      
        <content type="html"><![CDATA[<p>Learn C++ With Object Oriented</p><p><span style='color: pink'>今天 你面向对象了吗？</span></p><span id="more"></span><p>咱就是说 也想感受感受c++的魔力</p><h2 id="learn-from-scratch"><a href="#learn-from-scratch" class="headerlink" title="learn from scratch"></a>learn from scratch</h2><h3 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do while语句"></a>do while语句</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">statement</span>(s);</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>( condition );</span><br></pre></td></tr></table></figure><p>在循环尾部检查条件 至少执行一次循环</p><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(a)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能直接用于string，可用map将string对应于int型再用switch</p><h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><p>能够存放任意类型的动态数组 线性有序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">vector&lt;elem_type&gt; obj; <span class="comment">//创建一个向量存储容器 元素类型为elem_type</span></span><br><span class="line">obj.<span class="built_in">size</span>()  <span class="comment">//返回容器中元素个数</span></span><br><span class="line">obj.<span class="built_in">empty</span>() <span class="comment">//判断是否为空 返回bool值</span></span><br><span class="line">obj.<span class="built_in">push_back</span>(elem) <span class="comment">//在数组最后添加数据 </span></span><br><span class="line">obj.<span class="built_in">pop_back</span>() <span class="comment">//弹出数组最后一个元素</span></span><br><span class="line">obj.<span class="built_in">clear</span>() <span class="comment">//清零</span></span><br><span class="line">obj.<span class="built_in">insert</span>(obj.<span class="built_in">begin</span>(), x) <span class="comment">//在开头插入元素x</span></span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>栈 先进后出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">s.<span class="built_in">push</span>(x); <span class="comment">//入栈</span></span><br><span class="line">s.<span class="built_in">top</span>(); <span class="comment">//返回栈顶元素</span></span><br><span class="line">s.<span class="built_in">pop</span>(); <span class="comment">//删除栈顶元素 并不返回该元素</span></span><br><span class="line">s.<span class="built_in">size</span>(); <span class="comment">//返回栈中元素个数</span></span><br><span class="line">s.<span class="built_in">empty</span>(); <span class="comment">//判断栈是否为空 返回bool值</span></span><br></pre></td></tr></table></figure><h3 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; myMap; <span class="comment">// &lt;key, value&gt;</span></span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line">myMap[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span>;<span class="comment">//已存在则修改 不存在则插入</span></span><br><span class="line">myMap.<span class="built_in">insert</span>( &#123; &#123;<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>&#125; &#125; );</span><br><span class="line"><span class="comment">//修改元素</span></span><br><span class="line">myMap[<span class="string">&#x27;a&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">myMap.<span class="built_in">erase</span>(<span class="string">&#x27;a&#x27;</span>); <span class="comment">//删除key为a的元素</span></span><br><span class="line">myMap.<span class="built_in">erase</span>(myMap.<span class="built_in">begin</span>()); <span class="comment">//删除第一个元素</span></span><br><span class="line"><span class="comment">//查询指定key的元素的个数 在unordered_map中非0即1</span></span><br><span class="line">map.<span class="built_in">count</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">myMap.<span class="built_in">clear</span>();<span class="comment">//清空</span></span><br><span class="line">myMap.<span class="built_in">empty</span>();<span class="comment">//判空</span></span><br><span class="line">myMap.<span class="built_in">size</span>();<span class="comment">//查询键值对数量</span></span><br></pre></td></tr></table></figure><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="快速选择排序"><a href="#快速选择排序" class="headerlink" title="快速选择排序"></a>快速选择排序</h3><p>任取待排序元素序列中的某元素作为基准值，按照该排序码将待排序集合分割成两子序列，左子序列中所有元素均小于基准值，右子序列中所有元素均大于基准值，然后最左右子序列重复该过程，直到所有元素都排列在相应位置上为止 。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i=l<span class="number">-1</span>, j=r+<span class="number">1</span>;   </span><br><span class="line">    <span class="type">int</span> x = q[(l+r)/<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x); <span class="comment">//先++</span></span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j+<span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, &amp;n);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i; i &lt; n; i ++)</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i; i &lt; n; i ++)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>将两个有序数组合并</p><ol><li>确定分界点 mid = (l + r) / 2</li><li>递归排序左右部分</li><li>合并</li></ol><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N], t[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; <span class="comment">//右移</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) </span><br><span class="line">            t[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) t[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) t[k++] = q[j++];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = l, k = <span class="number">0</span>; i &lt;= r; i ++, k ++)</span><br><span class="line">        q[i] = t[k];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="整数二分法"><a href="#整数二分法" class="headerlink" title="整数二分法"></a>整数二分法</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid+1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;   <span class="comment">//check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区间[l, r]被划分成[l, mid-1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo test</title>
      <link href="/2022/08/05/hexo-test/"/>
      <url>/2022/08/05/hexo-test/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个引用</p><p>本文为从魏佬那儿引用来的梁佬的testpost</p></blockquote><span id="more"></span><hr><h1 id="hexo博客支持性测试"><a href="#hexo博客支持性测试" class="headerlink" title="hexo博客支持性测试"></a>hexo博客支持性测试</h1><h2 id="文字测试"><a href="#文字测试" class="headerlink" title="文字测试"></a>文字测试</h2><p><em>斜体</em>，<strong>粗体</strong>，<strong><em>粗斜体</em></strong>，<del>删除线</del>，<a href="">超链接</a></p><p>嵌入代码：<code>MessageBoxW(hWnd, L&quot;Hello world!&quot;, L&quot;Tips&quot;, MB_ICONASTERISK)</code></p><p>标签：<span class="label success">成功</span> <span class="label warning">警告</span> <span class="label danger">危险</span> <span class="label primary">重要</span> <span class="label info">信息</span> <span class="label default">默认</span></p><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>居中引用</p>            <i class="fa fa-quote-right"></i>          </blockquote><div class="note info">            <p><strong>提示</strong></p><p><code>MessageBoxW</code>用于显示一个对话框</p>          </div><h2 id="代码-公式测试"><a href="#代码-公式测试" class="headerlink" title="代码/公式测试"></a>代码/公式测试</h2><h3 id="c-代码"><a href="#c-代码" class="headerlink" title="c++代码"></a>c++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="折叠的Lua代码"><a href="#折叠的Lua代码" class="headerlink" title="折叠的Lua代码"></a>折叠的Lua代码</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello = <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> k, _ <span class="keyword">in</span> <span class="built_in">_G</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>    </div></div><h3 id="LaTeX公式："><a href="#LaTeX公式：" class="headerlink" title="LaTeX公式："></a>LaTeX公式：</h3><script type="math/tex; mode=display">x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}</script><script type="math/tex; mode=display">A = \begin{bmatrix}    a_{11} & a_{12} & ...    & a_{1n} \\\\    a_{21} & a_{22} & ...    & a_{2n} \\\\     a_{31} & a_{22} & ...    & a_{3n} \\\\    \vdots & \vdots & \ddots & \vdots \\\\    a_{n1} & a_{n2} & ...    & a_{nn} \\\\ \end{bmatrix} , b = \begin{bmatrix}  b_{1}  \\\\  b_{2}  \\\\  b_{3}  \\\\  \vdots \\\\  b_{n}  \\\\\end{bmatrix}</script><p>行内公式：$ \int_{0}^{\pi}{\sin x \mathrm{d} x} = 2 $</p><p>$a \times b$</p><h2 id="组件测试"><a href="#组件测试" class="headerlink" title="组件测试"></a>组件测试</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>一些 <code>Hello World</code></p><div class="table-container"><table><thead><tr><th>语言</th><th></th></tr></thead><tbody><tr><td>C</td><td><code>puts(&quot;Hello World!&quot;);</code></td></tr><tr><td>C++</td><td><code>std::cout &lt;&lt; &quot;Hello World!&quot;&lt;&lt; std::endl;</code></td></tr><tr><td>Python</td><td><code>print(&quot;Hello World!&quot;)</code></td></tr><tr><td>Go</td><td><code>fmt.Println(&quot;Hello World!&quot;)</code></td></tr><tr><td>BatchScript</td><td><code>echo Hello World!</code></td></tr><tr><td><del>brainfuck</del></td><td><code>++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</code></td></tr></tbody></table></div><h3 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h3><div class="tabs" id="解决方案"><ul class="nav-tabs"><li class="tab active"><a href="#解决方案-1">解决方案 1</a></li><li class="tab"><a href="#解决方案-2">解决方案 2</a></li><li class="tab"><a href="#解决方案-3">解决方案 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="解决方案-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #1 */</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="解决方案-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #2 */</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="解决方案-3"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #3 */</span></span><br></pre></td></tr></table></figure></div></div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> hexo test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/04/hello-world/"/>
      <url>/2022/08/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
