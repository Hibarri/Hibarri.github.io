<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>神经网络</title>
      <link href="/2022/11/06/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/11/06/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p><code>˙Ꙫ˙</code></p><span id="more"></span><h3 id="神经网络基本骨架nn-Module"><a href="#神经网络基本骨架nn-Module" class="headerlink" title="神经网络基本骨架nn.Module"></a>神经网络基本骨架<code>nn.Module</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(nn.Module):  <span class="comment"># 继承nn.Module类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  <span class="comment"># 初始化</span></span><br><span class="line">        <span class="built_in">super</span>(Model, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conc2d(<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>)  <span class="comment"># 卷积</span></span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">20</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):  <span class="comment"># 前向传播 输入x</span></span><br><span class="line">        x = F.relu(self.conv1(x))  <span class="comment"># 卷积+非线性处理</span></span><br><span class="line">        <span class="keyword">return</span> F.relu(self.conv2(x))  <span class="comment"># 又一次卷积+非线性</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># e.g.</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">My_Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">super</span>(My_Model, self).__init__()</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="built_in">input</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例</span></span><br><span class="line">my_model = My_Model()</span><br><span class="line">x = torch.tensor(<span class="number">1.0</span>)</span><br><span class="line">output = my_model(x)</span><br></pre></td></tr></table></figure><h3 id="卷积层-Convolution-Layers"><a href="#卷积层-Convolution-Layers" class="headerlink" title="卷积层 Convolution Layers"></a>卷积层 <code>Convolution Layers</code></h3><p><code>nn.Conv2d</code> 2维卷积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CLASS torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=<span class="number">1</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, groups=<span class="number">1</span>, bias=<span class="literal">True</span>, padding_mode=<span class="string">&#x27;zeros&#x27;</span>, device=<span class="literal">None</span>, dtype=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 一般前五个参数需要自己设置</span></span><br></pre></td></tr></table></figure><ul><li><strong>in_channels</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a>) – Number of channels in the input image</li><li><strong>out_channels</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a>) – Number of channels produced by the convolution</li><li><strong>kernel_size</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a> <em>or</em> <a href="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a>) – Size of the convolving kernel   在训练过程中不断调整</li><li><strong>stride</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a> <em>or</em> <a href="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a><em>,</em> <em>optional</em>) – Stride of the convolution. Default: 1</li><li><strong>padding</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a><em>,</em> <a href="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a> <em>or</em> <a href="https://docs.python.org/3/library/stdtypes.html#str"><em>str</em></a><em>,</em> <em>optional</em>) – Padding added to all four sides of the input. Default: 0</li><li><strong>padding_mode</strong> (<a href="https://docs.python.org/3/library/stdtypes.html#str"><em>str</em></a><em>,</em> <em>optional</em>) – <code>&#39;zeros&#39;</code>, <code>&#39;reflect&#39;</code>, <code>&#39;replicate&#39;</code> or <code>&#39;circular&#39;</code>. Default: <code>&#39;zeros&#39;</code></li><li><strong>dilation</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a> <em>or</em> <a href="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a><em>,</em> <em>optional</em>) – Spacing between kernel elements. Default: 1</li><li><strong>groups</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a><em>,</em> <em>optional</em>) – Number of blocked connections from input channels to output channels. Default: 1</li><li><strong>bias</strong> (<a href="https://docs.python.org/3/library/functions.html#bool"><em>bool</em></a><em>,</em> <em>optional</em>) – If <code>True</code>, adds a learnable bias to the output. Default: <code>True</code></li></ul><p>Shape计算</p><p><img src="/2022/11/06/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20221106205832895.png" alt="image-20221106205832895"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> Conv2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.Totensor(), download=<span class="literal">True</span>)</span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>) <span class="comment"># batch_seze一次取64张图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">My_Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">super</span>(My_Model, self).__init__()</span><br><span class="line">        self.conv1 = Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>) <span class="comment"># 输出3通道 期望输出6通道 kernel大小3×3 横向纵向每次走一步</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">my_model = My_Model()</span><br><span class="line"><span class="comment"># print(my_model)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># writer = SummaryWriter(&quot;../logs&quot;) # 可用tensorboard直观显示</span></span><br><span class="line"><span class="comment"># step = 0</span></span><br><span class="line"><span class="comment"># 查看每张图像</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    output = my_model(imgs)</span><br><span class="line">    <span class="comment"># print(output.shape)  </span></span><br><span class="line">    <span class="comment"># writer.add_images(&quot;input&quot;, imgs, step)</span></span><br><span class="line">    <span class="comment"># torch.reshape(output, (-1,3,30,30))</span></span><br><span class="line">    <span class="comment"># writer.add_images()</span></span><br><span class="line">    <span class="comment"># step ++;</span></span><br><span class="line">    <span class="comment"># 终端pytorch环境下输入tensorboard --logdir=logs</span></span><br></pre></td></tr></table></figure><p>常用卷积层</p><p>VGG16  注意设置的padding大小</p><p><img src="/2022/11/06/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20221106210116509.png" alt="image-20221106210116509"></p><h3 id="池化层-Pooling-layers"><a href="#池化层-Pooling-layers" class="headerlink" title="池化层 Pooling layers"></a>池化层 <code>Pooling layers</code></h3><p><code>MaxPool2d</code>最大池化</p><p>最大池化MaxPool </p><p>即取局部值最大的点 下采样</p><p>保留输入特征同时减小数据量</p><p>(MaxUnpool 上采样)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CLASS torch.nn.MaxPool2d(kernel_size, stride=<span class="literal">None</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, return_indices=<span class="literal">False</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># stride默认值为kernel_size</span></span><br><span class="line"><span class="comment"># ceil_mode 向上取整 floor_mode 向下取整</span></span><br><span class="line"><span class="comment"># 一般只需要设置kernel_size</span></span><br></pre></td></tr></table></figure><p>在输入图像上每次取池化核大小范围内的最大值（步长默认为核大小）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = torch.tensor([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">                      [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">                      [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                      [<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                      [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]], dtype=torch.float32)</span><br><span class="line"><span class="comment"># input必须为四维 (N(batchsize),Channel,Height,Width)</span></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (-<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>))<span class="comment"># batchsize=-1(-1时自动计算),channel=1,5×5</span></span><br><span class="line"><span class="comment"># print(input.shape)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">My_Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">super</span>(My_Model, self).__init__()</span><br><span class="line">        self.maxpool1 = MaxPool2d(kernel_size=<span class="number">3</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = self.maxpool1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">my_model = My_Model()</span><br><span class="line">output = my_model(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><h3 id="非线性激活-Non-linear-Activations"><a href="#非线性激活-Non-linear-Activations" class="headerlink" title="非线性激活 Non-linear Activations"></a>非线性激活 <code>Non-linear Activations</code></h3><p>常用非线性激活</p><p><code>ReLU</code>    <code>SIGMOID</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以ReLU为例 input&lt;0 output=0, input&gt;=0 output=input</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([[<span class="number">1</span>, -<span class="number">0.5</span>],</span><br><span class="line">                      [-<span class="number">1</span>,<span class="number">3</span>]])</span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>,(-<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.shape)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">My_Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">super</span>(My_Model, self).__init__()</span><br><span class="line">        self.relu1 = ReLU() <span class="comment"># inplace=True将input值替换为output 默认False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>)</span><br><span class="line">    output = self.relu1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    </span><br><span class="line">my_model = My_Model()</span><br><span class="line">output = my_model(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><h3 id="线性层-Linear-Layers"><a href="#线性层-Linear-Layers" class="headerlink" title="线性层 Linear Layers"></a>线性层 <code>Linear Layers</code></h3><h3 id="Normalization-Layers"><a href="#Normalization-Layers" class="headerlink" title="Normalization Layers"></a><code>Normalization Layers</code></h3><p><code>BatchNorm2d</code>  防止过拟合</p><h3 id="Dropout-Layers"><a href="#Dropout-Layers" class="headerlink" title="Dropout Layers"></a><code>Dropout Layers</code></h3><p>随机失活  防止过拟合</p><blockquote><p>看这里啦</p><p><a href="https://pytorch.org/docs/stable/nn.html">https://pytorch.org/docs/stable/nn.html</a></p><p><a href="https://www.bilibili.com/video/BV1hE411t7RN?p=18&amp;spm_id_from=pageDriver&amp;vd_source=3def6347655903bff36de76eff34d8eb">https://www.bilibili.com/video/BV1hE411t7RN?p=18&amp;spm_id_from=pageDriver&amp;vd_source=3def6347655903bff36de76eff34d8eb</a></p></blockquote><hr><p><strong>stride</strong> 步</p><p><strong>batch</strong> 批</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2022/10/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E8%AE%BE/"/>
      <url>/2022/10/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E8%AE%BE/</url>
      
        <content type="html"><![CDATA[<p><code>꒰꒪꒫꒪⌯꒱</code></p><span id="more"></span><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><h3 id="Linux目录操作"><a href="#Linux目录操作" class="headerlink" title="Linux目录操作"></a>Linux目录操作</h3><h4 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a><code>pwd</code>命令</h4><p>显示当前所在目录</p><h4 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a><code>cd</code>命令</h4><p>切换当前目录</p><ul><li><code>cd</code> 进入用户主目录；</li><li><code>cd ~</code> 进入用户主目录；</li><li><code>cd -</code>返回进入此目录之前所在的目录；</li><li><code>cd ..</code>返回上级目录(若当前目录为”/“，则执行完后还在”/“；”..”为上级目录的意思)；</li><li><code>cd ../..</code> 返回上两级目录；</li><li><code>cd !$</code> 把上个命令的参数作为<code>cd</code>参数使用。</li></ul><h4 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a><code>ls</code>命令</h4><p>列出指定目录列表信息，如果没有参数默认列出当前目录下的所有文件和文件夹(隐藏文件和文件夹除外)。</p><p>常见命令选项：</p><ul><li>-l：以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等；</li><li>-a：显示所有文件和文件夹(包括隐藏文件/文件夹)。</li></ul><h3 id="Linux文件及文件夹操作"><a href="#Linux文件及文件夹操作" class="headerlink" title="Linux文件及文件夹操作"></a>Linux文件及文件夹操作</h3><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><p><code>touch filename</code></p><p><code>touch file1 file2 ...</code>创建多个文件</p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p><code>rm [命令选项] filename</code></p><p>常见命令选项：</p><ul><li>-f：强制删除文件或目录；</li><li>-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；</li><li>-i：删除已有文件或目录之前先询问用户</li></ul><h4 id="创建文件夹-mkdir"><a href="#创建文件夹-mkdir" class="headerlink" title="创建文件夹 mkdir"></a>创建文件夹 <code>mkdir</code></h4><p><code>mkdir [命令选项] dirname</code></p><p>常用命令选项： <code>-p 或 --parents</code> 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；</p><h4 id="删除文件夹-rmdir-rm-r"><a href="#删除文件夹-rmdir-rm-r" class="headerlink" title="删除文件夹 rmdir/rm/-r"></a>删除文件夹 <code>rmdir/rm/-r</code></h4><p><code>rmdir [命令选项] dirname</code></p><p>常用命令选项：<code>-p 或 --parents</code>删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；</p><h4 id="文件和文件夹拷贝-cp"><a href="#文件和文件夹拷贝-cp" class="headerlink" title="文件和文件夹拷贝 cp"></a>文件和文件夹拷贝 <code>cp</code></h4><p><code>cp [命令选项] 源文件 目的文件</code></p><p>将一个或多个源文件或者目录复制到指定的目录中</p><p>常用命令选项：</p><ul><li>-f：强行复制文件或目录，不论目标文件或目录是否已存在；</li><li>-i：覆盖既有文件之前先询问用户；</li><li>-p：保留源文件或目录的属性；</li><li>-R/r：递归处理，将指定目录下的所有文件与子目录一并处理。</li></ul><h4 id="文件和文件夹移动-重命名-mv"><a href="#文件和文件夹移动-重命名-mv" class="headerlink" title="文件和文件夹移动/重命名 mv"></a>文件和文件夹移动/重命名 <code>mv</code></h4><p><code>mv [命令选项] 源文件 目标文件</code></p><p>常用命令选项同拷贝操作</p><p>例如：新建一个文件<code>newfile</code>和一个文件夹<code>newdir</code>，将<code>newfile</code>剪切到<code>newdir</code>目录下，并重新命名为<code>newfileCpy</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch newfile</span><br><span class="line">mkdir newdir</span><br><span class="line">mv newfile newdir/newfileCpy</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圣诞节要给czh画棵圣诞树！</title>
      <link href="/2022/10/19/%E5%9C%A3%E8%AF%9E%E8%8A%82%E8%A6%81%E7%BB%99czh%E7%94%BB%E6%A3%B5%E5%9C%A3%E8%AF%9E%E6%A0%91%EF%BC%81/"/>
      <url>/2022/10/19/%E5%9C%A3%E8%AF%9E%E8%8A%82%E8%A6%81%E7%BB%99czh%E7%94%BB%E6%A3%B5%E5%9C%A3%E8%AF%9E%E6%A0%91%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p><code>Merry Christmas!!</code></p><span id="more"></span><p><img src="/2022/10/19/%E5%9C%A3%E8%AF%9E%E8%8A%82%E8%A6%81%E7%BB%99czh%E7%94%BB%E6%A3%B5%E5%9C%A3%E8%AF%9E%E6%A0%91%EF%BC%81/image-20221024093647839-16665754190721.png" alt="image-20221024093647839"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">setup(<span class="number">500</span>, <span class="number">500</span>, startx=<span class="literal">None</span>, starty=<span class="literal">None</span>)</span><br><span class="line">speed(<span class="number">0</span>)</span><br><span class="line">pencolor(<span class="string">&quot;pink&quot;</span>)</span><br><span class="line">pensize(<span class="number">10</span>)</span><br><span class="line">penup()</span><br><span class="line">hideturtle()</span><br><span class="line">goto(<span class="number">0</span>, <span class="number">150</span>)</span><br><span class="line">showturtle()</span><br><span class="line">pendown()</span><br><span class="line">shape(name=<span class="string">&quot;classic&quot;</span>)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">seth(-<span class="number">120</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    fd(<span class="number">12</span>)</span><br><span class="line">    right(<span class="number">2</span>)</span><br><span class="line">penup()</span><br><span class="line">goto(<span class="number">0</span>, <span class="number">150</span>)</span><br><span class="line">seth(-<span class="number">60</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    fd(<span class="number">12</span>)</span><br><span class="line">    left(<span class="number">2</span>)</span><br><span class="line">seth(-<span class="number">150</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    right(<span class="number">15</span>)</span><br><span class="line">seth(-<span class="number">150</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">8</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    right(<span class="number">15</span>)</span><br><span class="line">seth(-<span class="number">155</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">5</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">7</span>)</span><br><span class="line">    right(<span class="number">15</span>)</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">penup()</span><br><span class="line">goto(-<span class="number">55</span>, <span class="number">34</span>)</span><br><span class="line">pendown()</span><br><span class="line">seth(-<span class="number">120</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    fd(<span class="number">8</span>)</span><br><span class="line">    right(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">penup()</span><br><span class="line">goto(<span class="number">50</span>, <span class="number">35</span>)</span><br><span class="line">seth(-<span class="number">60</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    fd(<span class="number">8</span>)</span><br><span class="line">    left(<span class="number">5</span>)</span><br><span class="line">seth(-<span class="number">120</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">seth(-<span class="number">145</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    right(<span class="number">15</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">seth(-<span class="number">145</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">12</span>)</span><br><span class="line">    right(<span class="number">15</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">8</span>)</span><br><span class="line">seth(-<span class="number">145</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    right(<span class="number">15</span>)</span><br><span class="line">penup()</span><br><span class="line">seth(-<span class="number">155</span>)</span><br><span class="line">fd(<span class="number">8</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">11</span>)</span><br><span class="line">    right(<span class="number">15</span>)</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">penup()</span><br><span class="line">goto(-<span class="number">100</span>, -<span class="number">40</span>)</span><br><span class="line">seth(-<span class="number">120</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    fd(<span class="number">6</span>)</span><br><span class="line">    right(<span class="number">3</span>)</span><br><span class="line">penup()</span><br><span class="line">goto(<span class="number">80</span>, -<span class="number">39</span>)</span><br><span class="line">seth(-<span class="number">50</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    fd(<span class="number">6</span>)</span><br><span class="line">    left(<span class="number">3</span>)</span><br><span class="line">seth(-<span class="number">155</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">8</span>)</span><br><span class="line">    right(<span class="number">10</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">8</span>)</span><br><span class="line">seth(-<span class="number">145</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    fd(<span class="number">8</span>)</span><br><span class="line">    right(<span class="number">10</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">8</span>)</span><br><span class="line">seth(-<span class="number">145</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    fd(<span class="number">7</span>)</span><br><span class="line">    right(<span class="number">10</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">8</span>)</span><br><span class="line">seth(-<span class="number">145</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    fd(<span class="number">7</span>)</span><br><span class="line">    right(<span class="number">10</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">8</span>)</span><br><span class="line">seth(-<span class="number">140</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    fd(<span class="number">6</span>)</span><br><span class="line">    right(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line">penup()</span><br><span class="line">goto(-<span class="number">120</span>, -<span class="number">95</span>)</span><br><span class="line">seth(-<span class="number">130</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    right(<span class="number">5</span>)</span><br><span class="line">penup()</span><br><span class="line">goto(<span class="number">100</span>, -<span class="number">95</span>)</span><br><span class="line">seth(-<span class="number">50</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    left(<span class="number">5</span>)</span><br><span class="line">penup()</span><br><span class="line">seth(-<span class="number">120</span>)</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">seth(-<span class="number">155</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    fd(<span class="number">8</span>)</span><br><span class="line">    right(<span class="number">10</span>)</span><br><span class="line">penup()</span><br><span class="line">seth(-<span class="number">160</span>)</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">seth(-<span class="number">155</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    fd(<span class="number">8</span>)</span><br><span class="line">    right(<span class="number">10</span>)</span><br><span class="line">penup()</span><br><span class="line">seth(-<span class="number">160</span>)</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">seth(-<span class="number">155</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    fd(<span class="number">8</span>)</span><br><span class="line">    right(<span class="number">10</span>)</span><br><span class="line">penup()</span><br><span class="line">seth(-<span class="number">160</span>)</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">seth(-<span class="number">160</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    fd(<span class="number">8</span>)</span><br><span class="line">    right(<span class="number">10</span>)</span><br><span class="line">penup()</span><br><span class="line">seth(-<span class="number">160</span>)</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">seth(-<span class="number">160</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    fd(<span class="number">8</span>)</span><br><span class="line">    right(<span class="number">10</span>)</span><br><span class="line">penup()</span><br><span class="line">seth(-<span class="number">160</span>)</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">seth(-<span class="number">165</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">10</span>)</span><br><span class="line">    right(<span class="number">11</span>)</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line">penup()</span><br><span class="line">goto(-<span class="number">70</span>, -<span class="number">165</span>)</span><br><span class="line">seth(-<span class="number">85</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    fd(<span class="number">5</span>)</span><br><span class="line">    left(<span class="number">3</span>)</span><br><span class="line">penup()</span><br><span class="line">goto(<span class="number">70</span>, -<span class="number">165</span>)</span><br><span class="line">seth(-<span class="number">95</span>)</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    fd(<span class="number">5</span>)</span><br><span class="line">    right(<span class="number">3</span>)</span><br><span class="line">seth(-<span class="number">170</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">pendown()</span><br><span class="line">pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    fd(<span class="number">12</span>)</span><br><span class="line">    right(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line">penup()</span><br><span class="line">goto(<span class="number">70</span>, -<span class="number">165</span>)</span><br><span class="line">pendown()</span><br><span class="line">seth(-<span class="number">90</span>)</span><br><span class="line">pensize(<span class="number">8</span>)</span><br><span class="line">pencolor(<span class="string">&quot;#de8891&quot;</span>)</span><br><span class="line">circle(-<span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">penup()</span><br><span class="line">goto(<span class="number">30</span>, -<span class="number">185</span>)</span><br><span class="line">pendown()</span><br><span class="line">seth(-<span class="number">180</span>)</span><br><span class="line">pensize(<span class="number">8</span>)</span><br><span class="line">pencolor(<span class="string">&quot;#de8891&quot;</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">penup()</span><br><span class="line">goto(-<span class="number">5</span>, -<span class="number">170</span>)</span><br><span class="line">pendown()</span><br><span class="line">seth(-<span class="number">180</span>)</span><br><span class="line">pensize(<span class="number">8</span>)</span><br><span class="line">pencolor(<span class="string">&quot;#de8891&quot;</span>)</span><br><span class="line">fd(<span class="number">35</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guest</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    seth(-z)</span><br><span class="line">    pendown()</span><br><span class="line">    <span class="keyword">for</span> angel <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        fd(<span class="number">10</span>)</span><br><span class="line">        right(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guet</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    seth(-z)</span><br><span class="line">    pendown()</span><br><span class="line">    <span class="keyword">for</span> angel <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        fd(<span class="number">10</span>)</span><br><span class="line">        left(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qu</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    seth(-z)</span><br><span class="line">    pendown()</span><br><span class="line">    <span class="keyword">for</span> angel <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        fd(<span class="number">6</span>)</span><br><span class="line">        right(<span class="number">10</span>)</span><br><span class="line">    seth(-<span class="number">150</span>)</span><br><span class="line">    fd(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 树枝</span></span><br><span class="line">guest(-<span class="number">70</span>, -<span class="number">150</span>, <span class="number">160</span>)</span><br><span class="line">guest(<span class="number">100</span>, -<span class="number">150</span>, <span class="number">160</span>)</span><br><span class="line">guet(<span class="number">110</span>, -<span class="number">110</span>, <span class="number">50</span>)</span><br><span class="line">guest(<span class="number">160</span>, -<span class="number">140</span>, <span class="number">150</span>)</span><br><span class="line">qu(<span class="number">80</span>, -<span class="number">120</span>, <span class="number">180</span>)</span><br><span class="line">guest(<span class="number">70</span>, -<span class="number">85</span>, <span class="number">165</span>)</span><br><span class="line">guest(-<span class="number">40</span>, -<span class="number">85</span>, <span class="number">165</span>)</span><br><span class="line">guet(<span class="number">90</span>, -<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">guest(<span class="number">130</span>, -<span class="number">80</span>, <span class="number">150</span>)</span><br><span class="line">pencolor(<span class="string">&quot;pink&quot;</span>)</span><br><span class="line">qu(-<span class="number">40</span>, -<span class="number">60</span>, <span class="number">180</span>)</span><br><span class="line">pencolor(<span class="string">&#x27;#de8891&#x27;</span>)</span><br><span class="line">qu(<span class="number">80</span>, -<span class="number">30</span>, <span class="number">180</span>)</span><br><span class="line">pencolor(<span class="string">&quot;pink&quot;</span>)</span><br><span class="line">qu(<span class="number">40</span>, <span class="number">10</span>, <span class="number">180</span>)</span><br><span class="line">pencolor(<span class="string">&quot;#de8891&quot;</span>)</span><br><span class="line">guest(-<span class="number">60</span>, <span class="number">30</span>, <span class="number">120</span>)</span><br><span class="line">guest(-<span class="number">20</span>, -<span class="number">20</span>, <span class="number">150</span>)</span><br><span class="line">guet(<span class="number">45</span>, <span class="number">40</span>, <span class="number">60</span>)</span><br><span class="line">guest(-<span class="number">30</span>, <span class="number">40</span>, <span class="number">170</span>)</span><br><span class="line">guest(-<span class="number">30</span>, <span class="number">110</span>, <span class="number">115</span>)</span><br><span class="line">guet(<span class="number">40</span>, <span class="number">90</span>, <span class="number">60</span>)</span><br><span class="line">guest(<span class="number">80</span>, <span class="number">50</span>, <span class="number">160</span>)</span><br><span class="line">pencolor(<span class="string">&quot;#de8891&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hdj</span>(<span class="params">x, y</span>):</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    seth(<span class="number">80</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    pensize(<span class="number">2</span>)</span><br><span class="line">    circle(<span class="number">5</span>)</span><br><span class="line">    seth(<span class="number">10</span>)</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    seth(<span class="number">120</span>)</span><br><span class="line">    fd(<span class="number">20</span>)</span><br><span class="line">    seth(<span class="number">240</span>)</span><br><span class="line">    fd(<span class="number">20</span>)</span><br><span class="line">    seth(<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">20</span>)</span><br><span class="line">    seth(-<span class="number">60</span>)</span><br><span class="line">    fd(<span class="number">20</span>)</span><br><span class="line">    seth(<span class="number">50</span>)</span><br><span class="line">    fd(<span class="number">20</span>)</span><br><span class="line">    seth(-<span class="number">40</span>)</span><br><span class="line">    fd(<span class="number">30</span>)</span><br><span class="line">    seth(-<span class="number">130</span>)</span><br><span class="line">    fd(<span class="number">5</span>)</span><br><span class="line">    seth(<span class="number">135</span>)</span><br><span class="line">    fd(<span class="number">30</span>)</span><br><span class="line">    seth(-<span class="number">60</span>)</span><br><span class="line">    fd(<span class="number">30</span>)</span><br><span class="line">    seth(-<span class="number">150</span>)</span><br><span class="line">    fd(<span class="number">6</span>)</span><br><span class="line">    seth(<span class="number">110</span>)</span><br><span class="line">    fd(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uit</span>(<span class="params">x, y</span>):</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line">    pensize(<span class="number">2</span>)</span><br><span class="line">    circle(<span class="number">5</span>)</span><br><span class="line">    seth(-<span class="number">10</span>)</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    seth(<span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    seth(<span class="number">200</span>)</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    seth(<span class="number">160</span>)</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    seth(-<span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    seth(<span class="number">10</span>)</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    seth(-<span class="number">60</span>)</span><br><span class="line">    fd(<span class="number">20</span>)</span><br><span class="line">    seth(-<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">5</span>)</span><br><span class="line">    seth(<span class="number">110</span>)</span><br><span class="line">    fd(<span class="number">20</span>)</span><br><span class="line">    seth(-<span class="number">90</span>)</span><br><span class="line">    fd(<span class="number">20</span>)</span><br><span class="line">    seth(-<span class="number">180</span>)</span><br><span class="line">    fd(<span class="number">6</span>)</span><br><span class="line">    seth(<span class="number">70</span>)</span><br><span class="line">    fd(<span class="number">15</span>)</span><br><span class="line">    hideturtle()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yut</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line">    seth(z)</span><br><span class="line">    <span class="keyword">for</span> po <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        fd(<span class="number">4</span>)</span><br><span class="line">        left(<span class="number">36</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ytu</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line">    seth(z)</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        fd(<span class="number">4</span>)</span><br><span class="line">        left(<span class="number">36</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小蝴蝶结</span></span><br><span class="line">seth(<span class="number">0</span>)</span><br><span class="line">uit(<span class="number">40</span>, -<span class="number">160</span>)</span><br><span class="line">hdj(-<span class="number">80</span>, -<span class="number">120</span>)</span><br><span class="line">yut(-<span class="number">67</span>, -<span class="number">115</span>, <span class="number">120</span>)</span><br><span class="line">yut(-<span class="number">86</span>, -<span class="number">123</span>, <span class="number">150</span>)</span><br><span class="line">hdj(<span class="number">40</span>, -<span class="number">50</span>)</span><br><span class="line">yut(<span class="number">52</span>, -<span class="number">45</span>, <span class="number">130</span>)</span><br><span class="line">yut(<span class="number">34</span>, -<span class="number">55</span>, <span class="number">160</span>)</span><br><span class="line">seth(<span class="number">0</span>)</span><br><span class="line">uit(-<span class="number">20</span>, -<span class="number">60</span>)</span><br><span class="line">ytu(-<span class="number">4</span>, -<span class="number">60</span>, <span class="number">100</span>)</span><br><span class="line">ytu(-<span class="number">20</span>, -<span class="number">60</span>, <span class="number">120</span>)</span><br><span class="line">hdj(-<span class="number">30</span>, <span class="number">20</span>)</span><br><span class="line">yut(-<span class="number">15</span>, <span class="number">25</span>, <span class="number">130</span>)</span><br><span class="line">yut(-<span class="number">40</span>, <span class="number">20</span>, <span class="number">180</span>)</span><br><span class="line">uit(<span class="number">30</span>, <span class="number">70</span>)</span><br><span class="line">ytu(<span class="number">45</span>, <span class="number">70</span>, <span class="number">100</span>)</span><br><span class="line">ytu(<span class="number">30</span>, <span class="number">70</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大蝴蝶结</span></span><br><span class="line">pencolor(<span class="string">&quot;#f799e6&quot;</span>)</span><br><span class="line">pensize(<span class="number">5</span>)</span><br><span class="line">penup()</span><br><span class="line">seth(<span class="number">0</span>)</span><br><span class="line">goto(<span class="number">0</span>, <span class="number">150</span>)</span><br><span class="line">pendown()</span><br><span class="line">circle(<span class="number">10</span>)</span><br><span class="line">seth(-<span class="number">15</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line">seth(<span class="number">90</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line">seth(<span class="number">200</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line">seth(<span class="number">160</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line">seth(-<span class="number">90</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line">seth(<span class="number">15</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line">seth(-<span class="number">70</span>)</span><br><span class="line">pencolor(<span class="string">&quot;#f799e6&quot;</span>)</span><br><span class="line">pensize(<span class="number">4</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line">seth(-<span class="number">180</span>)</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">seth(<span class="number">100</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line">seth(-<span class="number">100</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line">seth(-<span class="number">180</span>)</span><br><span class="line">fd(<span class="number">10</span>)</span><br><span class="line">seth(<span class="number">70</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line">penup()</span><br><span class="line">seth(<span class="number">0</span>)</span><br><span class="line">goto(<span class="number">0</span>, <span class="number">130</span>)</span><br><span class="line">pencolor(<span class="string">&quot;pink&quot;</span>)</span><br><span class="line">pendown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iou</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pencolor(<span class="string">&quot;#f799e6&quot;</span>)</span><br><span class="line">    pendown()</span><br><span class="line">    seth(z)</span><br><span class="line">    <span class="keyword">for</span> po <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        fd(<span class="number">4</span>)</span><br><span class="line">        left(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seth(<span class="number">0</span>)</span><br><span class="line">iou(<span class="number">35</span>, <span class="number">145</span>, <span class="number">100</span>)</span><br><span class="line">iou(-<span class="number">7</span>, <span class="number">145</span>, <span class="number">110</span>)</span><br><span class="line">pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">pensize(<span class="number">7</span>)</span><br><span class="line">penup()</span><br><span class="line">goto(-<span class="number">35</span>, <span class="number">135</span>)</span><br><span class="line">pendown()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 圣诞帽</span></span><br><span class="line">seth(-<span class="number">20</span>)</span><br><span class="line">pensize(<span class="number">2</span>)</span><br><span class="line">penup()</span><br><span class="line">goto(-<span class="number">30</span>, -<span class="number">120</span>)</span><br><span class="line">pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">pendown()</span><br><span class="line">fillcolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">fd(<span class="number">30</span>)</span><br><span class="line">circle(<span class="number">4</span>, <span class="number">180</span>)</span><br><span class="line">fd(<span class="number">30</span>)</span><br><span class="line">circle(<span class="number">4</span>, <span class="number">180</span>)</span><br><span class="line">penup()</span><br><span class="line">goto(-<span class="number">25</span>, -<span class="number">115</span>)</span><br><span class="line">seth(<span class="number">75</span>)</span><br><span class="line">pendown()</span><br><span class="line">begin_fill()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">6</span>)</span><br><span class="line">    right(<span class="number">20</span>)</span><br><span class="line">seth(-<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">8</span>)</span><br><span class="line">    right(<span class="number">15</span>)</span><br><span class="line">seth(<span class="number">145</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">5</span>)</span><br><span class="line">    left(<span class="number">2</span>)</span><br><span class="line">seth(<span class="number">90</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">1</span>)</span><br><span class="line">    left(<span class="number">2</span>)</span><br><span class="line">seth(-<span class="number">90</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    fd(<span class="number">4</span>)</span><br><span class="line">    right(<span class="number">6</span>)</span><br><span class="line">seth(<span class="number">161</span>)</span><br><span class="line">fd(<span class="number">30</span>)</span><br><span class="line">end_fill()</span><br><span class="line">pensize(<span class="number">1</span>)</span><br><span class="line">pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">koc</span>(<span class="params">x, y, size</span>):</span><br><span class="line">    pensize(<span class="number">2</span>)</span><br><span class="line">    pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    penup()</span><br><span class="line">    goto(x, y)</span><br><span class="line">    pendown()</span><br><span class="line">    begin_fill()</span><br><span class="line">    fillcolor(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        left(<span class="number">72</span>)</span><br><span class="line">        fd(size)</span><br><span class="line">        right(<span class="number">144</span>)</span><br><span class="line">        fd(size)</span><br><span class="line">    end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 星星</span></span><br><span class="line">seth(-<span class="number">15</span>)</span><br><span class="line">koc(-<span class="number">120</span>, -<span class="number">70</span>, <span class="number">10</span>)</span><br><span class="line">seth(<span class="number">10</span>)</span><br><span class="line">koc(<span class="number">100</span>, -<span class="number">20</span>, <span class="number">10</span>)</span><br><span class="line">seth(-<span class="number">10</span>)</span><br><span class="line">koc(<span class="number">10</span>, <span class="number">40</span>, <span class="number">10</span>)</span><br><span class="line">seth(<span class="number">30</span>)</span><br><span class="line">koc(-<span class="number">80</span>, <span class="number">60</span>, <span class="number">10</span>)</span><br><span class="line">koc(<span class="number">100</span>, -<span class="number">150</span>, <span class="number">10</span>)</span><br><span class="line">koc(-<span class="number">140</span>, -<span class="number">150</span>, <span class="number">10</span>)</span><br><span class="line">koc(<span class="number">20</span>, <span class="number">120</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 袜子</span></span><br><span class="line">seth(-<span class="number">20</span>)</span><br><span class="line">pensize(<span class="number">2</span>)</span><br><span class="line">penup()</span><br><span class="line">goto(-<span class="number">20</span>, <span class="number">80</span>)</span><br><span class="line">pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">pendown()</span><br><span class="line">fillcolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">fd(<span class="number">25</span>)</span><br><span class="line">circle(<span class="number">4</span>, <span class="number">180</span>)</span><br><span class="line">fd(<span class="number">25</span>)</span><br><span class="line">circle(<span class="number">4</span>, <span class="number">180</span>)</span><br><span class="line">penup()</span><br><span class="line">goto(-<span class="number">15</span>, <span class="number">80</span>)</span><br><span class="line">pendown()</span><br><span class="line">begin_fill()</span><br><span class="line">fillcolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">seth(-<span class="number">120</span>)</span><br><span class="line">fd(<span class="number">20</span>)</span><br><span class="line">seth(<span class="number">150</span>)</span><br><span class="line">fd(<span class="number">5</span>)</span><br><span class="line">circle(<span class="number">7</span>, <span class="number">180</span>)</span><br><span class="line">fd(<span class="number">15</span>)</span><br><span class="line">circle(<span class="number">5</span>, <span class="number">90</span>)</span><br><span class="line">fd(<span class="number">30</span>)</span><br><span class="line">seth(<span class="number">160</span>)</span><br><span class="line">fd(<span class="number">18</span>)</span><br><span class="line">end_fill()</span><br><span class="line">penup()</span><br><span class="line">seth(<span class="number">0</span>)</span><br><span class="line">goto(<span class="number">100</span>, -<span class="number">230</span>)</span><br><span class="line">pendown()</span><br><span class="line">write(<span class="string">&quot;Merry Christmas&quot;</span>, align=<span class="string">&quot;right&quot;</span>, font=(<span class="string">&quot;方正黄草简体&quot;</span>, <span class="number">24</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line">done()</span><br></pre></td></tr></table></figure><p>(笑死 怎么可能是自己写的啦 当然是直接copy的啦</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>龟兔赛跑算法</title>
      <link href="/2022/10/17/%E9%BE%9F%E5%85%94%E8%B5%9B%E8%B7%91%E7%AE%97%E6%B3%95/"/>
      <url>/2022/10/17/%E9%BE%9F%E5%85%94%E8%B5%9B%E8%B7%91%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><code>Floyd判圈算法</code>即<code>龟兔赛跑算法</code></p><span id="more"></span><p>​    假想「乌龟」和「兔子」在链表上移动，「兔子」跑得快，「乌龟」跑得慢。当「乌龟」和「兔子」从链表上的同一个节点开始移动时，如果该链表中没有环，那么「兔子」将一直处于「乌龟」的前方；如果该链表中有环，那么「兔子」会先于「乌龟」进入环，并且一直在环内移动。等到「乌龟」进入环时，由于「兔子」的速度快，它一定会在某个时刻与乌龟相遇，即套了「乌龟」若干圈。</p><p><code>力扣141.环形链表</code>给你一个链表的头节点<code>head</code>，判断链表中是否有环。若链表中存在环，则返回<code>true</code>，否则返回<code>false</code>。</p><p>解：</p><p>​    定义快慢两个指针，慢指针每次移动一步，快指针每次移动两步。初始时，慢指针位于head处，快指针位于head-&gt;next处。在移动过程中，快指针追上满指针，则有环，否则快指针到达链表尾部，则无环。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            ListNode* slow = head;</span><br><span class="line">            ListNode* fast = head-&gt;next;</span><br><span class="line">            <span class="keyword">while</span>(slow!=fase)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(fast==<span class="literal">nullptr</span>||fast-&gt;next==<span class="literal">nullptr</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                </span><br><span class="line">                slow = slow-&gt;next;</span><br><span class="line">                fast = fast-&gt;next-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://leetcode.cn/problems/linked-list-cycle/solution/huan-xing-lian-biao-by-leetcode-solution/">https://leetcode.cn/problems/linked-list-cycle/solution/huan-xing-lian-biao-by-leetcode-solution/</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天也要笑一笑 ت</title>
      <link href="/2022/10/05/%E4%BB%8A%E5%A4%A9%E4%B9%9F%E8%A6%81%E7%AC%91%E4%B8%80%E7%AC%91/"/>
      <url>/2022/10/05/%E4%BB%8A%E5%A4%A9%E4%B9%9F%E8%A6%81%E7%AC%91%E4%B8%80%E7%AC%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每天更一个冷笑话</p><p>让<span style="color:pink">yh</span>笑一笑</p></blockquote><p>好吧  可能做不到每天  可能也不好笑</p><p>但我保证 一定很冷！！</p><span id="more"></span><hr><p><strong>2022.11.16</strong></p><p>今天我不问鸭子 我问麻雀</p><p>“想扎什么发型”</p><p>“啾啾”</p><p>“揪揪就揪揪！”</p><p><strong>2022.11.15</strong></p><p>我问鸭子</p><p>我的谐音梗尬不尬</p><p>鸭子： “嘎”</p><p><strong>2022.11.13</strong></p><p>跟你们说件事你们可能不信</p><p>我不说了</p><p><strong>2022.11.11</strong></p><p>这个世界上真的有龙</p><p>我在屋里玩电脑</p><p>我妈在外面叫我吃饭</p><p>叫了三遍以后</p><p>她就推开门问我</p><p>你是不是龙？</p><p><strong>2022.11.8</strong></p><p>熊猫点外卖</p><p>​                ——笋到家了！</p><p><strong>2022.11.7</strong></p><p>“知道什么动物不挑食吗”</p><p>“鸡”</p><p>饥不择食哈哈</p><p><strong>2022.11.6</strong></p><p>“你买的什么书”</p><p>“编程”</p><p>“c++还是java”</p><p>“沈从文”</p><p>是《边城》啦！</p><p><strong>2022.11.3</strong></p><p>王八走读</p><p>​        ——憋不住笑了</p><p>（鳖不住校了）</p><p><strong>2022.10.26</strong></p><p>世界上总有许多出人意料的事情</p><p>比如</p><p>你以为我会举个例子</p><p><strong>2022.10.25</strong></p><p>yh非常胆小</p><p>但又宇宙炒鸡无敌喜欢看恐怖片</p><p>他每次呢只敢在大白天看</p><p>这一天 杰哥给了yh一张光盘</p><p>神秘地告诉他一定要在今天的半夜看</p><p>否则会带来厄运</p><p>夜色渐渐深了</p><p>外面的风呜呜刮着</p><p>yh小心翼翼的把光盘插入</p><p>紧张的心脏怦怦怦怦怦怦跳</p><p>电视屏幕一闪一闪一闪一闪</p><p>零点了</p><p>突然出现了一道白光</p><p>一个看不清脸的长发人影逐渐靠近</p><p>嘴里还念念有词</p><p>yh害怕极了</p><p>抱着枕头蜷缩在沙发里</p><p>人影越来越近</p><p>yh捂住了眼睛</p><p>但过了很久都没有声音</p><p>他疑惑地抬头一瞅</p><p>长发人影唰的一下冲过来朝他大喊</p><p>“ <span style="color:#F0BBFF">哥，二十一岁生日快乐啦!</span> ”</p><p><strong>2022.10.24</strong></p><p>“你看见我的紫薇了吗？”</p><p>“你的嘴不就在你脸上吗？？”</p><p><strong>2022.10.23</strong></p><p>“汽车会飞 打一饮料”</p><p>“是咖啡啦”</p><blockquote><p>从wyy那儿得来的冷笑话哈哈</p></blockquote><p><strong>2022.10.21</strong></p><p>“知道理发师出门要带什么嘛”</p><p>“带水</p><p> 因为 托尼带水”</p><p><strong>2022.10.20</strong></p><p>知道小公鸡为什么不能去学校上学嘛</p><p>因为学校得要一寸免冠照片</p><p><strong>2022.10.17</strong></p><p>今天</p><p>写一个递归</p><p><img src="/2022/10/05/%E4%BB%8A%E5%A4%A9%E4%B9%9F%E8%A6%81%E7%AC%91%E4%B8%80%E7%AC%91/递归.png" alt="递归"></p><p><strong>2022.10.16</strong></p><p>过年了</p><p>牛魔王犯错 铁扇公主不停地批评他</p><p>孙悟空实在看不下去了 对铁扇公主说：</p><p> “嫂嫂，还批牛爷？”</p><p>铁扇公主愣了一下 说：</p><p>“谢谢谢谢”</p><p><strong>2022.10.15</strong></p><p>我一睁开眼睛就亮</p><p>一闭上眼睛就暗</p><p>会不会我也是一个冰箱呢</p><p><strong>2022.10.14</strong></p><p>“哪种动物最安静”</p><p>“是猩猩</p><p>因为它喜欢敲咪咪”</p><p><strong>2022.10.12</strong></p><p>“我有一份让人惊讶的工作”</p><p>“什么工作”</p><p>“挖藕”</p><p><strong>2022.10.11</strong></p><p>今天不想写冷笑话了</p><p>想写几句好可爱的歌词！！</p><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p><span style="color:#F0BBFF">可能是月亮不会眨眼<br>星星不会说话<br>让你觉得孤单啦<br>可能是太阳熬夜太晚<br>云朵们都太懒<br>忘了帮你编童话<br>可能是你所谓的转角<br>是其他人的直线<br>所以没法给你个回答</span></p>            <i class="fa fa-quote-right"></i>          </blockquote><p><strong>2022.10.10</strong></p><p>一天呢</p><p>开心和高兴约好12点去吃午饭</p><p>然后开心就开始打游戏</p><p>让高兴到点叫他</p><p>结果两个人都忘记了</p><p>高兴觉得肚子很饿</p><p>一看时间都一点了</p><p>于是他就喊</p><p>“开心一点啦</p><p>开心一点啦！”</p><p><strong>2022.10.9</strong></p><p>张飞和刘备骑马骑到悬崖边上</p><p>刘备喊：“你快勒马！”</p><p>张飞答：“我很快乐！”</p><p><strong>2022.10.8</strong></p><p>有一只大象</p><p>在吃冰激凌</p><p>但是吃着吃就吐了</p><p>因为</p><p>象腻了！</p><p><strong>2022.10.7</strong></p><p>“Do u have a girlfriend?”</p><p>“Yeah, she is from another nation.”</p><p>“Which nation?”</p><p>“Imagination.”</p><p><strong>2022.10.6</strong></p><p>有一天呢</p><p>我和yh吵架</p><p>yh非常生气</p><p>气的他夺门而出</p><p>我一看 这哪行啊 我得追回来</p><p>于是我追着他跑了好几条街</p><p>终于把家门给拿回来了</p><p><strong>2022.10.5</strong></p><p>从前有一只小绵羊</p><p>某一天心血来潮去剪了羊毛</p><p>就再也睡不着了</p><p>因为它 失绵啦</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2022/10/02/python/"/>
      <url>/2022/10/02/python/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Learn Python From Computer Vison   <code>T^T</code></p></blockquote><span id="more"></span><h2 id="OpenCV之cv2函数"><a href="#OpenCV之cv2函数" class="headerlink" title="OpenCV之cv2函数"></a>OpenCV之cv2函数</h2><h3 id="img-cv2-imread-filepath-flags"><a href="#img-cv2-imread-filepath-flags" class="headerlink" title="img=cv2.imread(filepath,flags)"></a><code>img=cv2.imread(filepath,flags)</code></h3><p>读图片img 将图片存储为数组，数组内存放像素值</p><ul><li><p>filepath：读入图片的完整图片</p></li><li><p>flags：如何读入图片</p></li></ul><p><strong>img.shape[:3]取彩色图片的长、宽、通道数</strong></p><p>在矩阵中img.shape[0]表示行数，img.shape[1]表示列数</p><h3 id="cv2-imshow-quot-window-name-quot-img"><a href="#cv2-imshow-quot-window-name-quot-img" class="headerlink" title="cv2.imshow(&quot;window_name&quot;,img)"></a><code>cv2.imshow(&quot;window_name&quot;,img)</code></h3><p>创建一个窗口显示图片</p><ul><li><p>“window_name”：显示图像的窗口的名字</p></li><li><p>img：要显示的图像</p></li></ul><h3 id="cv2-waitKey-0"><a href="#cv2-waitKey-0" class="headerlink" title="cv2.waitKey(0)"></a><code>cv2.waitKey(0)</code></h3><p>等待键盘输入，单位毫秒</p><p>若在等待时间内按下任意键则返回按键的ASCII码，程序继续运行。若没有按下任何键，超时后返回-1。参数为0表示无限等待。不调用waitKey的话，窗口会一闪而逝，看不到显示的图片。</p><h3 id="cv2-destroyAllWindows"><a href="#cv2-destroyAllWindows" class="headerlink" title="cv2.destroyAllWindows()"></a><code>cv2.destroyAllWindows()</code></h3><p>销毁所有窗口</p><h3 id="cv2-destroyWindows-wname"><a href="#cv2-destroyWindows-wname" class="headerlink" title="cv2.destroyWindows(wname)"></a><code>cv2.destroyWindows(wname)</code></h3><p>销毁指定窗口</p><h3 id="cv2-imwrite-file-img-num"><a href="#cv2-imwrite-file-img-num" class="headerlink" title="cv2.imwrite(file,img,num)"></a><code>cv2.imwrite(file,img,num)</code></h3><p>保存一个图像</p><ul><li><p>file：要保存的文件名</p></li><li><p>img：要保存的图像</p></li><li><p>num：可选参数，它针对特定的格式：对于JPEG，其表示的是图像的质量，用0 - 100的整数表示，默认95;对于png ,第三个参数表示的是压缩级别。默认为3。</p></li><li><p>cv2.IMWRITE_JPEG_QUALITY类型为 long ,必须转换成 int</p></li><li><p>cv2.IMWRITE_PNG_COMPRESSION, 从0到9 压缩级别越高图像越小。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eg.</span></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;1.png&#x27;</span>,img,[<span class="built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="number">95</span>])</span><br><span class="line"></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;1.png&#x27;</span>,img，[<span class="built_in">int</span>(cv2.IMWRITE_PNG_COMPRESSION), <span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>相同目录下 包括拓展名</p><h3 id="cv2-filter2D图像卷积"><a href="#cv2-filter2D图像卷积" class="headerlink" title="cv2.filter2D图像卷积"></a><code>cv2.filter2D</code>图像卷积</h3><p>在<a href="https://so.csdn.net/so/search?q=OpenCV&amp;spm=1001.2101.3001.7020">OpenCV</a>中，允许用户自定义卷积核实现卷积操作，使用自定义卷积核实现卷积操作的函数是cv2.filter2D（），其语法格式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv2.filter2D（src,ddepth,kernel,anchor,delta,borderType）</span><br></pre></td></tr></table></figure><p>cv.filter2D()的常用形式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv2.filter2D（src,ddepth,kernel）</span><br></pre></td></tr></table></figure><ul><li><p>dst 为返回值，表示进行方框滤波后得到的处理结果。</p></li><li><p>src 是需要处理的图像，即原始图像。它能够有任意数量的通道，并能对各个通道独立处理。图像深度应该是CV_8U、CV_16U、CV_16S、CV_32F或者CV_64F中的一 种。</p></li><li><p>ddepth是处理结果图像的图像深度，一般使用-1表示与原始图像使用相同的图像深度。</p></li><li><p>kernel是卷积核，是一个单通道的数组。如果想在处理彩色图像时，让每个通道使用不同的核，则必须将彩色图像分解后使用不同的核完成操作。</p></li></ul><h3 id="cv2-KeyPoint"><a href="#cv2-KeyPoint" class="headerlink" title="cv2.KeyPoint"></a><code>cv2.KeyPoint</code></h3><p>关键点检测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 属性</span></span><br><span class="line">.pt <span class="comment"># 点的坐标</span></span><br><span class="line">.size <span class="comment"># 点邻域大小</span></span><br><span class="line">.angle <span class="comment"># 特征点方向</span></span><br><span class="line">.response <span class="comment"># 特征点响应程度指数 响应越强，关键点越好</span></span><br><span class="line">.octave <span class="comment"># 特征点所在的金字塔组 从哪一层得到的数据</span></span><br><span class="line">.class_id <span class="comment"># 类型</span></span><br></pre></td></tr></table></figure><h3 id="cv2-DMatch"><a href="#cv2-DMatch" class="headerlink" title="cv2.DMatch"></a><code>cv2.DMatch</code></h3><p>匹配关键点描述符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 属性</span></span><br><span class="line">.distance <span class="comment"># 描述符之间的距离，越小越好</span></span><br><span class="line">.trainIdx <span class="comment"># 目标图像中描述符的索引</span></span><br><span class="line">.queryIdx <span class="comment"># 查询图像中描述符的索引</span></span><br><span class="line">.imgIdx <span class="comment"># 目标图像的索引</span></span><br></pre></td></tr></table></figure><h3 id="cv2-warpAffine-仿射变换"><a href="#cv2-warpAffine-仿射变换" class="headerlink" title="cv2.warpAffine()仿射变换"></a><code>cv2.warpAffine()</code>仿射变换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">warpAffine</span>(<span class="params">src, M, dsize, dst=<span class="literal">None</span>, flags=<span class="literal">None</span>, borderMode=<span class="literal">None</span>, borderValue=<span class="literal">None</span></span>)</span><br></pre></td></tr></table></figure><ul><li>src：输入图像</li><li>M：运算矩阵，2行3列的，数据类型要求是float32位及以上</li><li>dsize：运算后矩阵的大小，也就是输出图片的尺寸</li><li>dst：输出图像</li><li>flags：插值方法的组合，与resize函数中的插值一样，可以查看cv2.resize</li><li>borderMode：像素外推方法，详情参考官网</li><li>borderValue：在恒定边框的情况下使用的borderValue值；默认情况下，它是 0</li></ul><h3 id="np-argmin-和np-argmax"><a href="#np-argmin-和np-argmax" class="headerlink" title="np.argmin()和np.argmax()"></a><code>np.argmin()</code>和<code>np.argmax()</code></h3><p>按照axis的要求返回最小的数/最大的数的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numpy.argmin(a, axis=<span class="literal">None</span>, out=<span class="literal">None</span>)</span><br><span class="line">numpy.argmax(a, axis=<span class="literal">None</span>, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/juzicode/p/15520820.html">OpenCV-通道分离与合并</a></p><p><a href="https://blog.csdn.net/weixin_43843069/article/details/122208702">OpenCV-特征点检测</a></p></blockquote><h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><p><code>import numpy as np</code></p><h3 id="将图片转换为数组"><a href="#将图片转换为数组" class="headerlink" title="将图片转换为数组"></a>将图片转换为数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img=np.array(img)</span><br></pre></td></tr></table></figure><h3 id="向line数组添加元素x"><a href="#向line数组添加元素x" class="headerlink" title="向line数组添加元素x"></a>向line数组添加元素x</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line.append(x)</span><br></pre></td></tr></table></figure><h3 id="数组求和，返回一个值"><a href="#数组求和，返回一个值" class="headerlink" title="数组求和，返回一个值"></a>数组求和，返回一个值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(a)</span><br></pre></td></tr></table></figure><h3 id="两数组按位置乘积"><a href="#两数组按位置乘积" class="headerlink" title="两数组按位置乘积"></a>两数组按位置乘积</h3><p>若两数组shape不同的话，会将小规格的矩阵延展成与另一矩阵一样大小，再求两者内积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mutiply(a,b)</span><br></pre></td></tr></table></figure><h3 id="返回数组维度"><a href="#返回数组维度" class="headerlink" title="返回数组维度"></a>返回数组维度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img.ndim <span class="comment"># 等于秩</span></span><br><span class="line"></span><br><span class="line">img.shape <span class="comment"># 返回一个元组 长度为维数(即ndim 如二维数组表示行列数)</span></span><br></pre></td></tr></table></figure><h3 id="创建全0数组"><a href="#创建全0数组" class="headerlink" title="创建全0数组"></a>创建全0数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(x)  <span class="comment"># x为0的个数</span></span><br><span class="line">np.zeros((<span class="number">2</span>,<span class="number">5</span>))  <span class="comment">#2行5列 默认float</span></span><br><span class="line">np.zeros((<span class="number">2</span>,<span class="number">5</span>), dtype=np.<span class="built_in">int</span>)  <span class="comment">#int型</span></span><br><span class="line"></span><br><span class="line">np.zeros_like(a, dtype=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#Return an array of zeros with the same shape and type as a given array.</span></span><br></pre></td></tr></table></figure><h3 id="比较两个数组是否相等"><a href="#比较两个数组是否相等" class="headerlink" title="比较两个数组是否相等"></a>比较两个数组是否相等</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.allclose(a, b, rtol=<span class="number">1e-05</span>, atol=<span class="number">1e-08</span>, equal_nan=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 判断公式：</span></span><br><span class="line"><span class="comment"># absolute(a - b) &lt;= (atol + rtol * absolute(b))</span></span><br></pre></td></tr></table></figure><p>如果两个数组在公差范围内按元素方式相等，则返回True。</p><p>公差值是正的，通常很小。将相对差(rtol * abs(b))和绝对差atol相加在一起，以与a和b之间的绝对差进行比较。</p><p>如果任一数组包含一个或多个NaN，则返回False。如果两个数组中的inf位于相同位置且具有相同符号，则将它们视为相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.isclose(a, b, rtol=<span class="number">1.e-5</span>, atol=<span class="number">1.e-8</span>, equal_nan=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>参数与numpy.allclose相同，判断公式也一样，区别在于numpy.isclose输出a，b两个数组每个位置判断的bool值，而numpy.allclose输出的是a，b两个数组整体的判断结果。</p><h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.logical_and(a, b)</span><br><span class="line"><span class="comment"># 对a,b数组每个元素进行逻辑与运算，返回bool</span></span><br></pre></td></tr></table></figure><h3 id="创建全1数组"><a href="#创建全1数组" class="headerlink" title="创建全1数组"></a>创建全1数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.ones(shape, dtype=<span class="built_in">float</span>, order=<span class="string">&#x27;C&#x27;</span>) </span><br><span class="line"><span class="comment"># shape:返回的数组的维度或形状</span></span><br><span class="line"><span class="comment"># dtype:可选参数,返回的数组内数据的数据类型,默认是float</span></span><br><span class="line"><span class="comment"># order:可选参数,与C语言类似,C代表行优先,F代表列优先</span></span><br></pre></td></tr></table></figure><h3 id="数组拼接"><a href="#数组拼接" class="headerlink" title="数组拼接"></a>数组拼接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numpy.stack((array1,array2)) <span class="comment">#将两数组拼接为三维数组</span></span><br><span class="line"></span><br><span class="line">numpy.row_stack() <span class="comment">#形成的是二维数组，行拼接在一起</span></span><br><span class="line"></span><br><span class="line">numpy.column_stack() <span class="comment">#二维数组，列拼接在一起</span></span><br></pre></td></tr></table></figure><h3 id="矩阵翻转"><a href="#矩阵翻转" class="headerlink" title="矩阵翻转"></a>矩阵翻转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.flip(a, axis=<span class="number">0</span>)  <span class="comment"># axis=0：上下翻转</span></span><br><span class="line">np.flip(a, axis=<span class="number">1</span>)  <span class="comment"># axis=1：左右翻转</span></span><br></pre></td></tr></table></figure><h3 id="扩展数组形状"><a href="#扩展数组形状" class="headerlink" title="扩展数组形状"></a>扩展数组形状</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numpy.expand_dims(arr, axis)</span><br><span class="line"><span class="comment"># 通过在指定位置插入新的轴来扩展数组形状</span></span><br></pre></td></tr></table></figure><h3 id="数组flatten"><a href="#数组flatten" class="headerlink" title="数组flatten"></a>数组flatten</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array.flatten()</span><br><span class="line"><span class="comment"># 把数组a降到一维，默认按行的方向降</span></span><br></pre></td></tr></table></figure><h3 id="生成对角矩阵"><a href="#生成对角矩阵" class="headerlink" title="生成对角矩阵"></a>生成对角矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.eye(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 生成3×3对角矩阵 除对角线外全0</span></span><br></pre></td></tr></table></figure><h3 id="计算均值及标准差"><a href="#计算均值及标准差" class="headerlink" title="计算均值及标准差"></a>计算均值及标准差</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算均值</span></span><br><span class="line">np.mean(array)</span><br><span class="line"><span class="comment">#计算标准差</span></span><br><span class="line">np.std(array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axis=0计算每一列均值 返回行向量</span></span><br><span class="line"><span class="comment"># axis=1计算每一行均值 返回行向量</span></span><br></pre></td></tr></table></figure><h3 id="向量点积及矩阵乘法"><a href="#向量点积及矩阵乘法" class="headerlink" title="向量点积及矩阵乘法"></a>向量点积及矩阵乘法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dot(a, b)</span><br></pre></td></tr></table></figure><h3 id="文件保存与读写"><a href="#文件保存与读写" class="headerlink" title="文件保存与读写"></a>文件保存与读写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">np.save(file, arr, allow_pickle=<span class="literal">True</span>, fix_imports=<span class="literal">True</span>) <span class="comment"># 以“.npy”格式将数组保存到二进制文件中</span></span><br><span class="line">np.load(file, mmap_mode=<span class="literal">None</span>, allow_pickle=<span class="literal">False</span>, fix_imports=<span class="literal">True</span>, encoding=‘ASCII’) <span class="comment"># Load arrays or pickled objects from .npy, .npz or pickled files.</span></span><br><span class="line">np.savez(file, *args, **kwds) <span class="comment"># 将多个数组保存到一个文件中的话</span></span><br><span class="line"><span class="comment"># savez函数的第一个参数是文件名，其后的参数都是需要保存的数组</span></span><br><span class="line"><span class="comment"># savez函数输出的是一个压缩文件(扩展名为npz)，其中每个文件都是一个save函数保存的npy文件，文件名对应于数组名。</span></span><br><span class="line"><span class="comment"># load函数自动识别npz文件，并且返回一个类似于字典的对象，可以通过数组名作为关键字获取数组的内容。</span></span><br></pre></td></tr></table></figure><h2 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">unittest.main()  <span class="comment"># 用来测试 类中以 test 开头的测试用例</span></span><br></pre></td></tr></table></figure><p>python函数中可以通过return语句返回多个值</p><h3 id="assert-断言"><a href="#assert-断言" class="headerlink" title="assert 断言"></a><code>assert</code> 断言</h3><p>Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。</p><p>断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法格式如下</span></span><br><span class="line"><span class="keyword">assert</span> expression</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> expression:</span><br><span class="line">    <span class="keyword">raise</span> AssertionError</span><br></pre></td></tr></table></figure><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a><code>enumerate()</code></h3><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通for循环</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">seq = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> seq:</span><br><span class="line">    <span class="built_in">print</span>(i, seq[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用enumerate</span></span><br><span class="line">seq = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(seq):</span><br><span class="line">    <span class="built_in">print</span>(i, element)</span><br></pre></td></tr></table></figure><h3 id="数组切片"><a href="#数组切片" class="headerlink" title="数组切片"></a>数组切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt;a = np.arange(<span class="number">9</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(a)</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(a[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(a[:])</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">img_1=img[a : b , c : d]  <span class="comment"># 左闭右开</span></span><br><span class="line"></span><br><span class="line">img_2=img[: , : , <span class="number">0</span>]      <span class="comment"># 只有冒号表示全取，0为step</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 负切片</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line"><span class="comment"># 从末尾开始的索引 3 到末尾开始的索引 1，对数组进行切片：</span></span><br><span class="line"><span class="built_in">print</span>(arr[-<span class="number">3</span>:-<span class="number">1</span>])</span><br><span class="line">&gt;&gt;&gt;[<span class="number">5</span> <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>使用 [:] 表示从开始到结束的切片,所有的索引值都是从0开始的，切片操作都是左闭右开的区间，比如[0:2]意思是0,1</p><hr><p><strong>kernel</strong> 核</p><p><strong>dimension</strong> 维</p><p><strong>odd</strong> 奇数的</p><p><strong>pixels</strong> 像素</p><p><strong>axis</strong> 轴    复数:axes</p><p><strong>indices</strong> index的复数</p><p><strong>enumerate</strong> 枚举</p><p><strong>coordinate</strong> 坐标</p><p><strong>gradient</strong> 斜率</p><p><strong>visualization</strong> 可视化</p><p><strong>overlay</strong> 覆盖</p><p><strong>orientation</strong> 方向</p><p><strong>intensity</strong> 强度</p><p><strong>radians</strong> 弧度</p><p><strong>translation</strong> 平移</p><p><strong>scale</strong> 缩放</p><p><strong>map</strong> 映射</p><p><strong>affine</strong> 仿射</p><p><strong>warp</strong> 变形 弯曲</p><p><strong>variance</strong> 方差</p><p><strong>custom descriptors</strong> 自定义描述符</p><p><strong>deprecated</strong> 弃用</p><p><strong>tuple</strong> 元组</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机原理</title>
      <link href="/2022/09/29/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
      <url>/2022/09/29/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><code>(꒪⌓꒪)</code></p><span id="more"></span><p>1字节 = 8位</p><p>字节是最小的寻<strong>址</strong>单位！</p><p>1字 = 2字节 = 16位</p><p>WORD 字 16位</p><p>DWORD 双字 32位</p><h2 id="Intel-x86微处理器的寄存器结构"><a href="#Intel-x86微处理器的寄存器结构" class="headerlink" title="Intel x86微处理器的寄存器结构"></a>Intel x86微处理器的寄存器结构</h2><p><img src="/2022/09/29/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/image-20221005205008112-16660610059285.png" alt="image-20221005205008112"></p><p><img src="/2022/09/29/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/image-20221005233014586.png" alt="image-20221005233014586"></p><p>通用寄存器：主要用于<code>算术运算</code>和<code>数据传送</code></p><p><img src="/2022/09/29/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/image-20221008210013032.png" alt="image-20221008210013032"></p><p>AX通常称为累加器</p><p>BX基地址寄存器，作为存储器指针来用</p><p>CX计数寄存器</p><p>DX数据寄存器</p><p>BP常用来寻址堆栈而不是数据段</p><p><strong>标志位</strong>：CF（进位）、ZF（零）、SF（符号）、OF（溢出）、AF（辅助进位）、PF（奇偶）</p><h2 id="16位系统寻址方式"><a href="#16位系统寻址方式" class="headerlink" title="16位系统寻址方式"></a>16位系统寻址方式</h2><h4 id="1-立即寻址"><a href="#1-立即寻址" class="headerlink" title="1.立即寻址"></a>1.立即寻址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, im  ; im:立即数</span><br><span class="line">MOV AX, @DATA  ; 在编译时返回整数常量值</span><br><span class="line">MOV SI, OFFSET ARRAY  ;??</span><br></pre></td></tr></table></figure><h4 id="2-直接寻址"><a href="#2-直接寻址" class="headerlink" title="2.直接寻址"></a>2.直接寻址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, [ARRAY]   </span><br><span class="line">SUB AX, [ARRAY+2]</span><br><span class="line">MOV AX, DS:[2000H]  ;设DS=3000H 物理地址：3000H×16(即左移4位变为20位)+2000H  偏移地址2000H由指令直接给出</span><br></pre></td></tr></table></figure><h4 id="3-寄存器寻址"><a href="#3-寄存器寻址" class="headerlink" title="3.寄存器寻址"></a>3.寄存器寻址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOV DS, AX</span><br></pre></td></tr></table></figure><h4 id="4-寄存器间接寻址"><a href="#4-寄存器间接寻址" class="headerlink" title="4.寄存器间接寻址"></a>4.寄存器间接寻址</h4><p>操作数放在存储器中，操作数的16位段内偏移地址存放在SI、DI、BP、BX这四个寄存器之一中</p><ul><li><p>若以SI、DI、BX间接寻址，则操作数存放在现行数据段中，此时，数据段寄存器<code>DS</code>的内容加上<code>SI、DI、BX</code>中的16位段内偏移地址，即得操作数地址</p></li><li><p>若以BP间接寻址，操作数存放在堆栈段区域中，此时，堆栈段寄存器<code>SS</code>的内容加上<code>BP</code>中的16位段内偏移地址，即得操作数地址</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, [SI]  ;设DS=2000H，SI=1000H  则操作数地址=21000H</span><br><span class="line">MOV AX, [BP]  ;设SS=3000H，BP=2000H  则操作数地址=32000H</span><br></pre></td></tr></table></figure><p><strong>DS、SS需左移四位</strong></p><h4 id="5-寄存器相对寻址"><a href="#5-寄存器相对寻址" class="headerlink" title="5.寄存器相对寻址"></a>5.寄存器相对寻址</h4><p>操作数存放在存储器中，操作数地址是由<code>段寄存器内容(SI、DI、BX对应DS，BP对应SS)</code>加上<code>SI、DI、BX、BP</code>其中之一的内容，再加上由<code>指令中所指出的8位或16位带符号相对地址偏移量</code>而得到的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, DISP[SI]  ;操作数地址为DISP+SI+DS(DS需左移4位)</span><br><span class="line">ADD AX, ARRAY[SI] </span><br><span class="line">MOV AX, [BX+6]</span><br></pre></td></tr></table></figure><h4 id="6-基址变址寻址"><a href="#6-基址变址寻址" class="headerlink" title="6.基址变址寻址"></a>6.基址变址寻址</h4><p>在8086/8088中，通常把<strong>BX和BP作为基址寄存器</strong>，而把<strong>SI、DI作为变址寄存器</strong>，将这两种寄存器联合起来进行的寻址就称为基址+变址寻址。</p><p>此时，操作数的地址为<code>段寄存器的内容（DS或SS BX对应DS BP对应SS）</code>加上<code>基址寄存器的内容（BX或BP）</code>，再加上<code>变址寄存器内容（SI或DI）</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, [BX][SI]  ;操作数地址为BX+SI+DS(DS&lt;&lt;4)</span><br></pre></td></tr></table></figure><h4 id="7-基址变址相对寻址"><a href="#7-基址变址相对寻址" class="headerlink" title="7.基址变址相对寻址"></a>7.基址变址相对寻址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, DISP[BX][SI]  ;BX+SI+DISP+DS(DS&lt;&lt;4)</span><br></pre></td></tr></table></figure><h4 id="8-PC相对寻址"><a href="#8-PC相对寻址" class="headerlink" title="8.PC相对寻址"></a>8.PC相对寻址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOOP L1   ; PC相对寻址</span><br></pre></td></tr></table></figure><h4 id="9-隐含寻址"><a href="#9-隐含寻址" class="headerlink" title="9.隐含寻址"></a>9.隐含寻址</h4><p>在有些指令中，不仅包含有操作码的信息，而且还隐含了操作数地址的信息。</p><h2 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h2><p>大小写不敏感 标识符不能以数字开头</p><p>R 寄存器</p><p>M 内存</p><p>AL 寄存器低八位</p><p>h 十六进制           b 二进制              q/o八进制               r 编码实数            d 十进制</p><p>注意：<strong>0</strong>A3h</p><h3 id="一、定义数据"><a href="#一、定义数据" class="headerlink" title="一、定义数据"></a>一、定义数据</h3><p><strong>BYTE</strong> 8位无符号<strong>整数</strong>                       SBYTE 8位有符号整数</p><p><strong>WORD</strong> 16位无符号整数                  SWORD 16位有符号整数</p><p><strong>DWORD</strong> 32位无符号整数                SDWORD 32位有符号整数</p><p>FWORD 48位整数                 </p><p>QWORD 64位整数</p><p><strong>小端存储</strong></p><p><img src="/2022/09/29/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/image-20221014234431129.png" alt="image-20221014234431129"></p><p>符号常量不占用任何实际的存储空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">; 计算数组和字符串的大小</span><br><span class="line">list1 BYTE 10,20,30,40</span><br><span class="line">List1Size = ($ - list1)  ; $代表当前偏移地址</span><br><span class="line">myString BYTE &quot;This is a long string,&quot;</span><br><span class="line">         BYTE &quot; Containing any number&quot;</span><br><span class="line">         BYTE &quot; of characters&quot;,0dh,0ah</span><br><span class="line">MyString_len = ($ - myString)</span><br><span class="line">list2 WORD 1000h,2000h,3000h,4000h</span><br><span class="line">List2Size = ($ - list2)/2</span><br></pre></td></tr></table></figure><h3 id="二、和数据相关的操作符和伪指令"><a href="#二、和数据相关的操作符和伪指令" class="headerlink" title="二、和数据相关的操作符和伪指令"></a>二、和数据相关的操作符和伪指令</h3><h4 id="预定义符号"><a href="#预定义符号" class="headerlink" title="预定义符号$"></a>预定义符号<code>$</code></h4><ul><li><p>表示当前这条指令在代码段中的偏移量</p></li><li><p>表示字符串结束   0dh,0ah换行</p></li></ul><h4 id="OFFSET操作符"><a href="#OFFSET操作符" class="headerlink" title="OFFSET操作符"></a><code>OFFSET</code>操作符</h4><p>返回数据标号的偏移地址（标号据数据段开始的距离，以字节为单位）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">bVal  BYTE  ?      ; 假设bVal位于00303000h处</span><br><span class="line">wVal  WORD  ?</span><br><span class="line">dVal1 DWORD ?</span><br><span class="line">dVal2 DWORD ?</span><br><span class="line">.code</span><br><span class="line">……</span><br><span class="line">mov esi,OFFSET bVal; ESI = 00303000</span><br><span class="line">mov esi,OFFSET wVal; ESI = 00303001</span><br><span class="line">mov esi,OFFSET dVal1; ESI = 00303003</span><br><span class="line">mov esi,OFFSET dVal2; ESI = 00303007</span><br><span class="line">mov esi,OFFSET bVal + 1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="PTR操作符"><a href="#PTR操作符" class="headerlink" title="PTR操作符"></a><code>PTR</code>操作符</h4><p>用来重载操作数的默认尺寸</p><p>必须和以下标准数据类型联合使用：BYTE，SBYTE，WORD，SWORD，DWORD，SDWORD，FWORD，QWORD，TBYTE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">myDouble DWORD 12345678h        ;小端存储</span><br><span class="line">.code</span><br><span class="line">mov ax, myDouble; 错误!</span><br><span class="line">mov ax, WORD PTR myDouble; ax = 5678h</span><br><span class="line">mov ax, WORD PTR [myDouble+2]; ax = 1234h</span><br><span class="line">mov bl, BYTE PTR myDouble; bl = 78h</span><br></pre></td></tr></table></figure><h4 id="TYPE操作符"><a href="#TYPE操作符" class="headerlink" title="TYPE操作符"></a><code>TYPE</code>操作符</h4><p>返回按字节计算的变量的单个元素的大小</p><h4 id="DUP伪指令"><a href="#DUP伪指令" class="headerlink" title="DUP伪指令"></a><code>DUP</code>伪指令</h4><p>duplicate 重复初始化数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str1 db 10 dup(&#x27;!@#&#x27;)  ;十个&#x27;!@#&#x27;</span><br></pre></td></tr></table></figure><h4 id="LENGTHOF操作符"><a href="#LENGTHOF操作符" class="headerlink" title="LENGTHOF操作符"></a><code>LENGTHOF</code>操作符</h4><p>计算数组中元素的个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">byte1    BYTE 10,20,30          ; LENGTHOF byte1 = 3</span><br><span class="line">array1   WORD 30 DUP(?),0,0     ;                  30+2</span><br><span class="line">array2   WORD 5 DUP(3 DUP(?))   ;                  5×3</span><br><span class="line">arrar3   DWORD 1,2,3,4          ;                  4</span><br><span class="line">digitStr BYTE &quot;12345678&quot;,0      ;                  9</span><br></pre></td></tr></table></figure><h4 id="SIZEOF操作符"><a href="#SIZEOF操作符" class="headerlink" title="SIZEOF操作符"></a><code>SIZEOF</code>操作符</h4><p>SIZEOF返回值 = LENGTHOF返回值 × TYPR返回值</p><h4 id="INVOKE伪指令"><a href="#INVOKE伪指令" class="headerlink" title="INVOKE伪指令"></a><code>INVOKE</code>伪指令</h4><p>自动在堆栈上压入参数并调用程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INVOKE Swap,ADDR Array,ADDR [Array+4]</span><br></pre></td></tr></table></figure><h4 id="PROTO伪指令"><a href="#PROTO伪指令" class="headerlink" title="PROTO伪指令"></a><code>PROTO</code>伪指令</h4><p>为一个已存在的过程创建原型。</p><p>原型声明了过程的名字和参数列表，允许一个过程在被定义之前就可以在其他地方被调用。</p><h3 id="三、数据传送指令"><a href="#三、数据传送指令" class="headerlink" title="三、数据传送指令"></a>三、数据传送指令</h3><h4 id="操作数类型"><a href="#操作数类型" class="headerlink" title="操作数类型"></a>操作数类型</h4><p>立即操作数（immediate）</p><ul><li><p>imm：8、16或32位立即数</p></li><li><p>imm8：8位立即数（字节）</p></li><li><p>imm16：16位立即数（字）</p></li><li><p>imm32： 32位立即数（双字）</p></li></ul><p>寄存器操作数（register）</p><ul><li><p>reg：任意的通用寄存器</p></li><li><p>sreg：16位段寄存器CS、DS、SS、ES、FS、GS</p></li><li><p>r8：AH、AL、BH、BL、CH、CL、DH、DL</p></li><li><p>16：AX、BX、CX、DX、SI、DI、SP、BP</p></li><li><p>r32：EAX、EBX、ECX、EDX、ESI、EDI、ESP、EBP</p></li></ul><p>内存操作数（memory）</p><ul><li>mem：8、16或32位内存操作数</li></ul><h4 id="直接内存操作数"><a href="#直接内存操作数" class="headerlink" title="直接内存操作数"></a>直接内存操作数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">...</span><br><span class="line">var1 BYTE 55h</span><br><span class="line">.code</span><br><span class="line">mov ax, @data</span><br><span class="line">mov ds, ax</span><br><span class="line">...</span><br><span class="line">mov al, [1040h]  ;设var1位于偏移1040h处</span><br><span class="line">mov al, var1     ;等价于 mov al, [var1]</span><br><span class="line">mov al, [var1+2] ;直接偏移操作数 </span><br></pre></td></tr></table></figure><h4 id="MOV指令"><a href="#MOV指令" class="headerlink" title="MOV指令"></a><code>MOV</code>指令</h4><ul><li>两个操作数的尺寸必须一致。</li><li><strong>两个操作数不能同时为内存操作数。</strong></li><li>目的操作数不能是CS，EIP和IP。</li><li>立即数不能直接送至段寄存器。</li></ul><p><img src="/2022/09/29/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/image-20221005231757119.png" alt="image-20221005231757119"></p><h4 id="XCHG指令"><a href="#XCHG指令" class="headerlink" title="XCHG指令"></a><code>XCHG</code>指令</h4><p>交换两个操作数内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">;格式 不能直接交换两个内存操作数</span><br><span class="line">xchg reg, reg</span><br><span class="line">xchg reg, mem</span><br><span class="line">xchg mem, reg</span><br><span class="line"></span><br><span class="line">;交换两个内存操作数 利用寄存器</span><br><span class="line">mov ax, val1</span><br><span class="line">xchg ax, val2</span><br><span class="line">mov val1, ax</span><br></pre></td></tr></table></figure><h3 id="四、布尔和比较指令"><a href="#四、布尔和比较指令" class="headerlink" title="四、布尔和比较指令"></a>四、布尔和比较指令</h3><h4 id="1-AND指令"><a href="#1-AND指令" class="headerlink" title="1.AND指令"></a>1.<code>AND</code>指令</h4><p>按位与 两操作数大小必须相同 用于特定位置清0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">; 允许操作数形式：</span><br><span class="line">AND reg,reg</span><br><span class="line">AND reg,mem</span><br><span class="line">AND mem,reg</span><br><span class="line">AND reg,imm</span><br><span class="line">AND mem,imm</span><br><span class="line"></span><br><span class="line">; 大小写ASCII码</span><br><span class="line">&#x27;a&#x27; 61h 01100001</span><br><span class="line">&#x27;A&#x27; 41h 01000001</span><br></pre></td></tr></table></figure><ul><li>总是清除OF (溢出)和 CF(进位)</li><li>根据结果修改SF(符号)、ZF(零)、PF(奇偶)</li></ul><h4 id="2-OR指令"><a href="#2-OR指令" class="headerlink" title="2.OR指令"></a>2.<code>OR</code>指令</h4><p>按位或 用于特定位置置1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; 将0-9间整数转换为对应ASCII码数字</span><br><span class="line">MOV dl,5    ;二进制值</span><br><span class="line">OR  dl,30h  ;00110000</span><br><span class="line">;或 add dl,30h</span><br><span class="line">;或 add dl,&#x27;0&#x27;</span><br></pre></td></tr></table></figure><h4 id="3-XOR指令"><a href="#3-XOR指令" class="headerlink" title="3.XOR指令"></a>3.<code>XOR</code>指令</h4><p>按位异或</p><h4 id="4-NOT指令"><a href="#4-NOT指令" class="headerlink" title="4.NOT指令"></a>4.<code>NOT</code>指令</h4><p>数据位按位取反，结果为反码</p><p>不影响任何标志位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;格式</span><br><span class="line">NOT reg</span><br><span class="line">NOT mem</span><br></pre></td></tr></table></figure><h4 id="5-TEST指令"><a href="#5-TEST指令" class="headerlink" title="5.TEST指令"></a>5.<code>TEST</code>指令</h4><p>格式同AND指令</p><p>两操作数按位相与，根据结果设置标志位，但不修改目的操作数</p><p>用于测试操作数某一位是0还是1</p><p>影响标志位：清除OF、CF   修改SF、ZF、PF</p><h4 id="6-CMP指令"><a href="#6-CMP指令" class="headerlink" title="6.CMP指令"></a>6.<code>CMP</code>指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;格式同AND指令</span><br><span class="line">cmp 目的操作数, 源操作数</span><br><span class="line"></span><br><span class="line">;无符号操作数比较</span><br><span class="line">目的&lt;源  ZF=0 CF=1 SF≠OF</span><br><span class="line">目的&gt;源  ZF=0 CF=0 SF=OF</span><br><span class="line">目的=源  ZF=1 CF=0</span><br></pre></td></tr></table></figure><p>执行目的操作数-源操作数，但不回送结果，只影响标志位</p><p>根据相减结果修改OF、SF、ZF、CF、AF、PF</p><h4 id="7-设置和清除单个CPU标志"><a href="#7-设置和清除单个CPU标志" class="headerlink" title="7.设置和清除单个CPU标志"></a>7.设置和清除单个CPU标志</h4><h3 id="五、算术运算"><a href="#五、算术运算" class="headerlink" title="五、算术运算"></a>五、算术运算</h3><h4 id="INC和DNC指令"><a href="#INC和DNC指令" class="headerlink" title="INC和DNC指令"></a><code>INC</code>和<code>DNC</code>指令</h4><p>increment +1</p><p>decrement -1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;格式</span><br><span class="line">inc reg/mem</span><br><span class="line">dec reg/mem</span><br><span class="line"></span><br><span class="line">inc BYTE PTR [esi]</span><br></pre></td></tr></table></figure><p>INC和DEC指令不影响进位标志</p><h4 id="ADD指令"><a href="#ADD指令" class="headerlink" title="ADD指令"></a><code>ADD</code>指令</h4><p>格式同MOV指令</p><p><strong>两个操作数不能同时为内存操作数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">var1 DWORD 10000h</span><br><span class="line">var2 DWORD 20000h</span><br><span class="line">.code</span><br><span class="line">mov eax,var1</span><br><span class="line">add eax,var2; 30000h</span><br></pre></td></tr></table></figure><h4 id="SUB指令"><a href="#SUB指令" class="headerlink" title="SUB指令"></a><code>SUB</code>指令</h4><p>格式同MOV指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">var1 DWORD 30000h</span><br><span class="line">var2 DWORD 10000h</span><br><span class="line">.code</span><br><span class="line">mov eax,var1</span><br><span class="line">sub eax,var2; 20000h</span><br></pre></td></tr></table></figure><p>影响标志位：CF（进位）、ZF（零）、SF（符号）、OF（溢出）、AF（辅助进位）、PF（奇偶）</p><h4 id="NEG指令"><a href="#NEG指令" class="headerlink" title="NEG指令"></a><code>NEG</code>指令</h4><p>negate 求负</p><p>将操作数按位取反、末位加1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;格式</span><br><span class="line">neg reg</span><br><span class="line">neg mem</span><br></pre></td></tr></table></figure><p>影响标志位同上</p><h4 id="mul乘法"><a href="#mul乘法" class="headerlink" title="mul乘法"></a><code>mul</code>乘法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;8位无符号数乘法</span><br><span class="line">mov al, 5h   ;被乘数放al寄存器</span><br><span class="line">mov bl 10h   ;乘数任一寄存器 但不能直接乘立即数</span><br><span class="line">mul bl       ;cf = 0   积在AX中，50h</span><br><span class="line"></span><br><span class="line">;有符号乘法</span><br><span class="line">imul</span><br></pre></td></tr></table></figure><h4 id="div除法"><a href="#div除法" class="headerlink" title="div除法"></a><code>div</code>除法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">;无符号数 8003h/100h</span><br><span class="line">mov dx,0   ;除数8位，则被除数16位放在AX，dx必须初始化</span><br><span class="line">mov ax,8003h  </span><br><span class="line">mov cx,100h   </span><br><span class="line">div cx     ;AX=0080h(商) DX=0003h(余数)</span><br><span class="line"></span><br><span class="line">;有符号除法</span><br><span class="line">idiv</span><br></pre></td></tr></table></figure><p>8位 被除数在AX 商在AL 余数在AH</p><p>16位 被除数在DX:AX 商在AX 余数在DX</p><h3 id="六、控制转移-JMP和LOOP指令"><a href="#六、控制转移-JMP和LOOP指令" class="headerlink" title="六、控制转移 JMP和LOOP指令"></a>六、控制转移 <code>JMP</code>和<code>LOOP</code>指令</h3><p>控制转移分为：</p><ul><li>无条件转移：JMP</li><li>条件转移：LOOP</li></ul><h4 id="LOOP指令"><a href="#LOOP指令" class="headerlink" title="LOOP指令"></a><code>LOOP</code>指令</h4><p><code>ECX</code>用作循环计数器，实地址模式下<code>CX</code>用作循环计数器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    mov  ax,0</span><br><span class="line">    mov  ecx,5</span><br><span class="line">L1: inc  ax</span><br><span class="line">    loop L1</span><br></pre></td></tr></table></figure><h3 id="七、条件跳转指令"><a href="#七、条件跳转指令" class="headerlink" title="七、条件跳转指令"></a>七、条件跳转指令</h3><h4 id="基于特定CPU标志值的跳转指令"><a href="#基于特定CPU标志值的跳转指令" class="headerlink" title="基于特定CPU标志值的跳转指令"></a>基于特定<code>CPU</code>标志值的跳转指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">JZ/JE    ;为0则跳转 ZF=1</span><br><span class="line">JNZ/JNE  ;不为0则跳转 ZF=0</span><br><span class="line"></span><br><span class="line">JC       ;设进位标志则跳转CF=1</span><br><span class="line">JNC      ;未设 CF=0</span><br><span class="line"></span><br><span class="line">JO       ;设溢出标志则跳转OF=1</span><br><span class="line">JNO      ;未设OF=0</span><br><span class="line"></span><br><span class="line">JS       ;设符号标志则跳转SF=1</span><br><span class="line">JNS      ;未设SF=0</span><br><span class="line"></span><br><span class="line">JP       ;设奇偶标志则跳转PF=1</span><br><span class="line">JNP      ;未设PF=0</span><br></pre></td></tr></table></figure><h4 id="基于CMP指令的跳转"><a href="#基于CMP指令的跳转" class="headerlink" title="基于CMP指令的跳转"></a>基于<code>CMP</code>指令的跳转</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JE     ;相等则跳转</span><br><span class="line">JNE    ;不等则跳转</span><br><span class="line">JCXZ   ;CX=0则跳转</span><br><span class="line">JECXZ  ;ECX=0则跳转</span><br></pre></td></tr></table></figure><p>无符号整数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JA  ;大于则跳转 同JNBE不小于或等于则跳转</span><br><span class="line">JAE ;大于等于则跳转 同JNB不小于则跳转</span><br><span class="line">JB  ;小于则跳转 同JNAE不大于或等于则跳转</span><br><span class="line">JBE ;小于或等于则跳转 同JNA不大于则跳转</span><br></pre></td></tr></table></figure><p>有符号整数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JG  ;大于则跳转 同JNLE</span><br><span class="line">JGE ;大于等于 同JNL</span><br><span class="line">JL  ;小于 同JNGE</span><br><span class="line">JLE ;小于或等于 同JNG</span><br></pre></td></tr></table></figure><h4 id="LOOPZ与LOOPE"><a href="#LOOPZ与LOOPE" class="headerlink" title="LOOPZ与LOOPE"></a><code>LOOPZ</code>与<code>LOOPE</code></h4><p>LOOPZ与LOOPE等价</p><p>执行逻辑：</p><p>​    ECX=ECX-1</p><p>​    if ECX&gt;0 and ZF=1, jump to destination</p><h4 id="LOOPNZ与LOOPNE"><a href="#LOOPNZ与LOOPNE" class="headerlink" title="LOOPNZ与LOOPNE"></a><code>LOOPNZ</code>与<code>LOOPNE</code></h4><p>等价</p><p>执行逻辑：</p><p>​    ECX=ECX-1</p><p>​    if ECX&gt;0 and ZF=0, jump to destination</p><h3 id="八、移位指令"><a href="#八、移位指令" class="headerlink" title="八、移位指令"></a>八、移位指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SHL/SHR    ;逻辑左/右移</span><br><span class="line">SAL/SAR    ;算数左/右移</span><br><span class="line">ROL/ROR    ;循环左/右移</span><br><span class="line">RCL/RCR    ;带进位的循环左/右移</span><br><span class="line">;SHLD/SHRD  双精度左/右移</span><br></pre></td></tr></table></figure><p>影响OF、CF</p><p>逻辑右移：最高位补0，最低位移入CF</p><p>算术右移：最高位保持，最低位移入CF</p><p>逻辑左移/算术左移：最高位移入CF，最低为补0</p><p>循环左移：最高位移入CF和最低位</p><p>循环右移：最低位移入CF和最高位</p><h3 id="九、过程"><a href="#九、过程" class="headerlink" title="九、过程"></a>九、过程</h3><p>用<code>PROC</code>和<code>ENDP</code>伪指令来声明</p><p>对程序进行逻辑划分为过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">; 启动过程</span><br><span class="line">main PROC</span><br><span class="line">...</span><br><span class="line">call MySub</span><br><span class="line">...</span><br><span class="line">exit</span><br><span class="line">main ENDP</span><br><span class="line">; 其他过程</span><br><span class="line">MySub PROC</span><br><span class="line">...</span><br><span class="line">ret</span><br><span class="line">MySub ENDP</span><br></pre></td></tr></table></figure><p>局部标号和全局标号</p><h3 id="十、字符串和数组"><a href="#十、字符串和数组" class="headerlink" title="十、字符串和数组"></a>十、字符串和数组</h3><h4 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h4><div class="table-container"><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>MOVSB, MOVSW, MOVSD</td><td><strong>移动字符串</strong>：拷贝DS:(E)SI寻址的内存操作数至ES:(E)DI</td></tr><tr><td>CMPSB, CMPSW, CMPSD</td><td><strong>比较字符串</strong>：比较内存中由DS:(E)SI寻址和ES:(E)DI寻址的字符串</td></tr><tr><td>SCASB, SCASW, SCASD</td><td><strong>扫描字符串</strong>：扫描ES:(E)DI指向的内存字符串查找与累加器匹配的值</td></tr><tr><td>STOSB, STOSW, STOSD</td><td><strong>存储字符串</strong>：将累加器内容存储到由ES:(E)DI寻址的内存中</td></tr><tr><td>LODSB, LODSW, LODSD</td><td><strong>将字符串数据装入累加器</strong>：将由DS:(E)SI寻址的内存单元装入累加其中</td></tr></tbody></table></div><ul><li>SI是DS段中的偏移</li><li>DI是ES段中的偏移</li></ul><h4 id="使用重复前缀"><a href="#使用重复前缀" class="headerlink" title="使用重复前缀"></a>使用重复前缀</h4><ul><li><p>字符串操作指令每次只能处理一个内存值。</p></li><li><p>通过增加一个重复前缀，字符串指令就会使用ECX作为计数器进行重复，实现用一条指令处理整个数组。</p></li></ul><div class="table-container"><table><thead><tr><th>前缀</th><th>描述</th></tr></thead><tbody><tr><td>REP</td><td>ECX&gt;0时重复</td></tr><tr><td>REPZ, REPE</td><td>ZF=1&amp;&amp;ECX&gt;0</td></tr><tr><td>REPNZ, REPNE</td><td>ZF=0&amp;&amp;ECX&gt;0</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main PROC</span><br><span class="line">  mov ax,@data  ;get addr of data seg</span><br><span class="line">  mov ds,ax   ;initialize DS</span><br><span class="line">  mov es,ax   ;initialize ES</span><br><span class="line"></span><br><span class="line">cld; clear direction flag</span><br><span class="line">mov si,OFFSET string1 ;SI points to source</span><br><span class="line">mov di,OFFSET string2 ;DI points to target</span><br><span class="line">mov cx,10    ; set counter to 10</span><br><span class="line">rep movsb; move 10 bytes</span><br></pre></td></tr></table></figure><p>方向标志：简单字符串指令使用方向标志来决定ESI和EDI是自动增加还是自动减少：</p><ul><li><p>方向标志位DF=0：ESI、EDI自动增加</p></li><li><p>DF=1：ESI、EDI自动减少</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CLD  ;清除方向标志</span><br><span class="line">STD  ;设置方向标志</span><br></pre></td></tr></table></figure></li></ul><h3 id="十一、结构"><a href="#十一、结构" class="headerlink" title="十一、结构"></a>十一、结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">;结构的定义</span><br><span class="line">Employee STRUCT</span><br><span class="line">   IdNum         BYTE  &quot;000000000&quot;</span><br><span class="line">   LastName      BYTE  30 DUP(0)</span><br><span class="line">   Years         WORD  0</span><br><span class="line">   SalaryHistory DWORD 0,0,0,0</span><br><span class="line">Employee ENDS</span><br><span class="line"></span><br><span class="line">;声明</span><br><span class="line">.data</span><br><span class="line">worker  Employee &lt;&gt;</span><br><span class="line">person1 Employee &lt;&quot;555223333&quot;&gt;</span><br><span class="line">person2 Employee &lt;,&quot;Jones&quot;&gt;</span><br><span class="line">person3 Employee &lt;,,,2 DUP(20000)&gt;</span><br><span class="line"></span><br><span class="line">;引用</span><br><span class="line">.code</span><br><span class="line">mov dx,worker.Years</span><br><span class="line">mov worker.SalaryHistory+4,30000  ; second salary</span><br><span class="line">mov edx,OFFSET worker.LastName</span><br><span class="line">mov esi,OFFSET worker</span><br><span class="line">mov ax,(Employee PTR [esi]).Years</span><br></pre></td></tr></table></figure><h3 id="十二、宏"><a href="#十二、宏" class="headerlink" title="十二、宏"></a>十二、宏</h3><p>命名的汇编语句块。调用时直接拷贝插入程序中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">;宏的定义</span><br><span class="line">mWriteStr MACRO string</span><br><span class="line">   push edx</span><br><span class="line">   mov  edx,OFFSET string</span><br><span class="line">   call WriteString</span><br><span class="line">   pop  edx</span><br><span class="line">ENDM</span><br><span class="line"></span><br><span class="line">;调用</span><br><span class="line">.data</span><br><span class="line">msg1 BYTE &quot;This is message 1.&quot;,0Dh,0Ah,’$’</span><br><span class="line">msg2 BYTE &quot;This is message 2.&quot;,0Dh,0Ah,’$’</span><br><span class="line">msg3 BYTE &quot;This is message 3.&quot;,0Dh,0Ah,’$’</span><br><span class="line">.code</span><br><span class="line">mWriteStr msg1</span><br><span class="line">mWriteStr msg2</span><br><span class="line">mWriteStr msg3</span><br></pre></td></tr></table></figure><h2 id="编程题举例"><a href="#编程题举例" class="headerlink" title="编程题举例"></a>编程题举例</h2><p>数组间接寻址</p><p>16位汇编：三个字相加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">arrayW WORD 1000h,2000h,3000h</span><br><span class="line">.code</span><br><span class="line">mov ax,@data</span><br><span class="line">mov ds,ax</span><br><span class="line">mov si,OFFSET arrayW</span><br><span class="line">mov ax,[si]</span><br><span class="line">add si,2</span><br><span class="line">add ax,[si]</span><br><span class="line">add si,2</span><br><span class="line">add ax,[si]</span><br></pre></td></tr></table></figure><p><code>P106 3.8</code> 在DATA为首地址的主存区域中存放100个无符号8位数，试编写程序找出其中最大的数，并将其放在KVFF存储单元中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MOV BX, SEG DATA</span><br><span class="line">MOV DS, BX</span><br><span class="line">MOV BX, OFFSET DATA</span><br><span class="line"></span><br><span class="line">;初始化</span><br><span class="line">MOV AL, [BX]</span><br><span class="line">INC BX</span><br><span class="line">MOV CX, 99</span><br><span class="line">AGIN:CMP AL, [BX]</span><br><span class="line">JAE NEXT</span><br><span class="line">MOV AL, [BX]</span><br><span class="line">NEXT:INC BX</span><br><span class="line">LOOP AGIN</span><br><span class="line">MOV KVFF, AL</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>P107 3.14</code> 试编写8086汇编程序，统计由主存40000H开始的16K个单元中所存放的字符“A”的个数，并将结果存放在DX中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">START:MOV DX, 40000H</span><br><span class="line">MOV DS, DX</span><br><span class="line">MOV CX, 16*1024</span><br><span class="line">MOV SI, 0</span><br><span class="line">MOV DX, 0</span><br><span class="line">FIND:MOV AL, [SI]</span><br><span class="line">CMP AL, &#x27;A&#x27;</span><br><span class="line">JNE NEXT   ;或JNZ</span><br><span class="line">INC DX</span><br><span class="line">NEXT:INC SI</span><br><span class="line">LOOP FIND</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p> <a href="https://godbolt.org">https://godbolt.org</a></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++</title>
      <link href="/2022/09/17/c%E8%89%B9/"/>
      <url>/2022/09/17/c%E8%89%B9/</url>
      
        <content type="html"><![CDATA[<p>Learn C++ With Object Oriented</p><p><span style="color: pink">今天 你面向对象了吗？</span></p><span id="more"></span><p>咱就是说 也想感受感受c++的魔力</p><h2 id="learn-from-scratch"><a href="#learn-from-scratch" class="headerlink" title="learn from scratch"></a>learn from scratch</h2><h3 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do while语句"></a>do while语句</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">statement</span>(s);</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>( condition );</span><br></pre></td></tr></table></figure><p>在循环尾部检查条件 至少执行一次循环</p><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(a)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能直接用于string，可用map将string对应于int型再用switch</p><h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><p>能够存放任意类型的动态数组 线性有序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">vector&lt;elem_type&gt; obj; <span class="comment">//创建一个向量存储容器 元素类型为elem_type</span></span><br><span class="line">obj.<span class="built_in">size</span>()  <span class="comment">//返回容器中元素个数</span></span><br><span class="line">obj.<span class="built_in">empty</span>() <span class="comment">//判断是否为空 返回bool值</span></span><br><span class="line">obj.<span class="built_in">push_back</span>(elem) <span class="comment">//在数组最后添加数据 </span></span><br><span class="line">obj.<span class="built_in">pop_back</span>() <span class="comment">//弹出数组最后一个元素</span></span><br><span class="line">obj.<span class="built_in">clear</span>() <span class="comment">//清零</span></span><br><span class="line">obj.<span class="built_in">insert</span>(obj.<span class="built_in">begin</span>(), x) <span class="comment">//在开头插入元素x</span></span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>栈 先进后出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">s.<span class="built_in">push</span>(x); <span class="comment">//入栈</span></span><br><span class="line">s.<span class="built_in">top</span>(); <span class="comment">//返回栈顶元素</span></span><br><span class="line">s.<span class="built_in">pop</span>(); <span class="comment">//删除栈顶元素 并不返回该元素</span></span><br><span class="line">s.<span class="built_in">size</span>(); <span class="comment">//返回栈中元素个数</span></span><br><span class="line">s.<span class="built_in">empty</span>(); <span class="comment">//判断栈是否为空 返回bool值</span></span><br></pre></td></tr></table></figure><h3 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; myMap; <span class="comment">// &lt;key, value&gt;</span></span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line">myMap[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span>;<span class="comment">//已存在则修改 不存在则插入</span></span><br><span class="line">myMap.<span class="built_in">insert</span>( &#123; &#123;<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>&#125; &#125; );</span><br><span class="line"><span class="comment">//修改元素</span></span><br><span class="line">myMap[<span class="string">&#x27;a&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">myMap.<span class="built_in">erase</span>(<span class="string">&#x27;a&#x27;</span>); <span class="comment">//删除key为a的元素</span></span><br><span class="line">myMap.<span class="built_in">erase</span>(myMap.<span class="built_in">begin</span>()); <span class="comment">//删除第一个元素</span></span><br><span class="line"><span class="comment">//查询指定key的元素的个数 在unordered_map中非0即1</span></span><br><span class="line">map.<span class="built_in">count</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">myMap.<span class="built_in">clear</span>();<span class="comment">//清空</span></span><br><span class="line">myMap.<span class="built_in">empty</span>();<span class="comment">//判空</span></span><br><span class="line">myMap.<span class="built_in">size</span>();<span class="comment">//查询键值对数量</span></span><br></pre></td></tr></table></figure><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="快速选择排序"><a href="#快速选择排序" class="headerlink" title="快速选择排序"></a>快速选择排序</h3><p>任取待排序元素序列中的某元素作为基准值，按照该排序码将待排序集合分割成两子序列，左子序列中所有元素均小于基准值，右子序列中所有元素均大于基准值，然后最左右子序列重复该过程，直到所有元素都排列在相应位置上为止 。</p><div class="spoiler collapsed">    <div class="spoiler-title">        code    </div>    <div class="spoiler-content">        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i=l<span class="number">-1</span>, j=r+<span class="number">1</span>;   </span><br><span class="line">    <span class="type">int</span> x = q[(l+r)/<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x); <span class="comment">//先++</span></span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j+<span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, &amp;n);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i; i &lt; n; i ++)</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i; i &lt; n; i ++)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>将两个有序数组合并</p><ol><li>确定分界点 mid = (l + r) / 2</li><li>递归排序左右部分</li><li>合并</li></ol><div class="spoiler collapsed">    <div class="spoiler-title">        code    </div>    <div class="spoiler-content">        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N], t[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; <span class="comment">//右移</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) </span><br><span class="line">            t[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) t[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) t[k++] = q[j++];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = l, k = <span class="number">0</span>; i &lt;= r; i ++, k ++)</span><br><span class="line">        q[i] = t[k];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="整数二分法"><a href="#整数二分法" class="headerlink" title="整数二分法"></a>整数二分法</h2><div class="spoiler collapsed">    <div class="spoiler-title">        code    </div>    <div class="spoiler-content">        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid+1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;   <span class="comment">//check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区间[l, r]被划分成[l, mid-1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo test</title>
      <link href="/2022/08/05/hexo-test/"/>
      <url>/2022/08/05/hexo-test/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个引用</p><p>本文为从魏佬那儿引用来的梁佬的testpost</p></blockquote><span id="more"></span><hr><h1 id="hexo博客支持性测试"><a href="#hexo博客支持性测试" class="headerlink" title="hexo博客支持性测试"></a>hexo博客支持性测试</h1><h2 id="文字测试"><a href="#文字测试" class="headerlink" title="文字测试"></a>文字测试</h2><p><em>斜体</em>，<strong>粗体</strong>，<strong><em>粗斜体</em></strong>，<del>删除线</del>，<a href>超链接</a></p><p>嵌入代码：<code>MessageBoxW(hWnd, L&quot;Hello world!&quot;, L&quot;Tips&quot;, MB_ICONASTERISK)</code></p><p>标签：<span class="label success">成功</span> <span class="label warning">警告</span> <span class="label danger">危险</span> <span class="label primary">重要</span> <span class="label info">信息</span> <span class="label default">默认</span></p><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>居中引用</p>            <i class="fa fa-quote-right"></i>          </blockquote><div class="note info">            <p><strong>提示</strong></p><p><code>MessageBoxW</code>用于显示一个对话框</p>          </div><h2 id="代码-公式测试"><a href="#代码-公式测试" class="headerlink" title="代码/公式测试"></a>代码/公式测试</h2><h3 id="c-代码"><a href="#c-代码" class="headerlink" title="c++代码"></a>c++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="折叠的Lua代码"><a href="#折叠的Lua代码" class="headerlink" title="折叠的Lua代码"></a>折叠的Lua代码</h3><div class="spoiler collapsed">    <div class="spoiler-title">        code    </div>    <div class="spoiler-content">        <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello = <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> k, _ <span class="keyword">in</span> <span class="built_in">_G</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>    </div></div><h3 id="LaTeX公式："><a href="#LaTeX公式：" class="headerlink" title="LaTeX公式："></a>LaTeX公式：</h3><script type="math/tex; mode=display">x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}</script><script type="math/tex; mode=display">A = \begin{bmatrix}    a_{11} & a_{12} & ...    & a_{1n} \\\\    a_{21} & a_{22} & ...    & a_{2n} \\\\     a_{31} & a_{22} & ...    & a_{3n} \\\\    \vdots & \vdots & \ddots & \vdots \\\\    a_{n1} & a_{n2} & ...    & a_{nn} \\\\ \end{bmatrix} , b = \begin{bmatrix}  b_{1}  \\\\  b_{2}  \\\\  b_{3}  \\\\  \vdots \\\\  b_{n}  \\\\\end{bmatrix}</script><p>行内公式：$ \int_{0}^{\pi}{\sin x \mathrm{d} x} = 2 $</p><p>$a \times b$</p><h2 id="组件测试"><a href="#组件测试" class="headerlink" title="组件测试"></a>组件测试</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>一些 <code>Hello World</code></p><div class="table-container"><table><thead><tr><th style="text-align:left">语言</th><th></th></tr></thead><tbody><tr><td style="text-align:left">C</td><td><code>puts(&quot;Hello World!&quot;);</code></td></tr><tr><td style="text-align:left">C++</td><td><code>std::cout &lt;&lt; &quot;Hello World!&quot;&lt;&lt; std::endl;</code></td></tr><tr><td style="text-align:left">Python</td><td><code>print(&quot;Hello World!&quot;)</code></td></tr><tr><td style="text-align:left">Go</td><td><code>fmt.Println(&quot;Hello World!&quot;)</code></td></tr><tr><td style="text-align:left">BatchScript</td><td><code>echo Hello World!</code></td></tr><tr><td style="text-align:left"><del>brainfuck</del></td><td><code>++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</code></td></tr></tbody></table></div><h3 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h3><div class="tabs" id="解决方案"><ul class="nav-tabs"><li class="tab active"><a href="#解决方案-1">解决方案 1</a></li><li class="tab"><a href="#解决方案-2">解决方案 2</a></li><li class="tab"><a href="#解决方案-3">解决方案 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="解决方案-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #1 */</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="解决方案-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #2 */</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="解决方案-3"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Code for solution #3 */</span></span><br></pre></td></tr></table></figure></div></div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> hexo test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/04/hello-world/"/>
      <url>/2022/08/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
